# ------------------------------------------------------------------------------------------------------------------------
# Reusable Workflow: Deploy Azure Resources Only
# ------------------------------------------------------------------------------------------------------------------------
name: z_template_deploy_infra
run-name: Deploy Bicep
on:
  workflow_call:
    inputs:
      envCode:
        required: true
        type: string
      templatePath:
        required: false
        type: string
        default: 'infra/bicep/'
      templateFile:
        required: false
        type: string
        default: 'main-basic.bicep'
      parameterFile:
        required: false
        type: string
        default: ''
      parameterFileReplaceTokens:
        required: false
        type: string
        default: 'false'
      runCreateInfra:
        required: false
        default: true
        type: boolean
      deployInResourceGroup:
        required: false
        default: true
        type: boolean
      createResourceGroup:
        description: Create Resource Group?
        type: boolean
        default: false
      publicAccessEnabled:
        description: Public Access Enabled?
        type: boolean
        default: false
      createDnsZones:
        description: Create DNS Zones?
        type: boolean
        default: false
      deployAIHub:
        description: Deploy AI Hub?
        type: boolean
        default: false
      addRoleAssignments:
        description: Add Role Assignments?
        type: boolean
        default: true
      appsToDeploy:
        description: Apps to Build and Deploy?
        type: string
        default: 'none'
      deployAPIM:
        description: Run Deploy APIM?
        type: boolean
        default: false
      requestorName:
        description: Requestor Name
        type: string
        default: 'UNKNOWN'
      bicepDeploymentMode:
        description: 'Bicep deploy action: Valid = create, validate, whatIf'
        required: false
        type: string
        default: 'create'

# ------------------------------------------------------------------------------------------------------------------------
jobs:
  deploy:
    name: Deploy Bicep
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.envCode }}
    permissions:
      id-token: write
      contents: read
      actions: read
      pages: write

    # ------------------------------------------------------------------------------------------------------------------------
    # Variables
    # ------------------------------------------------------------------------------------------------------------------------
    env:
      envCode: ${{ inputs.envCode }}
      generatedResourceGroupName: ${{ vars.RESOURCEGROUP_PREFIX }}-${{ inputs.envCode }}-${{ vars.GLOBAL_REGION_CODE }}-${{ vars.INSTANCE_NUMBER }}
      createResourceGroup: ${{ inputs.createResourceGroup }}
      publicAccessEnabled: ${{ inputs.publicAccessEnabled }}
      createDnsZones: ${{ inputs.createDnsZones }}
      deployAIHub: ${{ inputs.deployAIHub }}
      addRoleAssignments: ${{ inputs.addRoleAssignments }}
      deployAPI: ${{ inputs.appsToDeploy && inputs.appsToDeploy == 'API' || inputs.appsToDeploy == 'API+UI' && 'true' || 'false' }}
      deployUI:  ${{ inputs.appsToDeploy && inputs.appsToDeploy == 'UI' || inputs.appsToDeploy == 'API+UI' && 'true' || 'false' }}
      deployAPIM: ${{ inputs.deployAPIM }}
      loginWithFederatedIdentity: ${{ secrets.CICD_CLIENT_SECRET == '' && 'true' || 'false' }}
      loginWithSecret: ${{ secrets.CICD_CLIENT_SECRET != '' && 'true' || 'false' }}
      requestorName: ${{ inputs.requestorName }}
 
    # ------------------------------------------------------------------------------------------------------------------------
    # Outputs
    # ------------------------------------------------------------------------------------------------------------------------
    outputs:
      AI_HUB_ID: ${{ steps.deploy-bicep-rg.outputs.AI_HUB_ID }}
      AI_HUB_NAME: ${{ steps.deploy-bicep-rg.outputs.AI_HUB_NAME }}
      AI_ENDPOINT: ${{ steps.deploy-bicep-rg.outputs.AI_ENDPOINT }}
      UI_CONTAINER_APP_FQDN: ${{ steps.deploy-bicep-rg.outputs.UI_CONTAINER_APP_FQDN }}
      API_CONTAINER_APP_FQDN: ${{ steps.deploy-bicep-rg.outputs.API_CONTAINER_APP_FQDN }}

    # ------------------------------------------------------------------------------------------------------------------------
    # Actions
    # ------------------------------------------------------------------------------------------------------------------------
    steps:
      - name: Checkout Code
        if: ${{ inputs.runCreateInfra }}
        uses: actions/checkout@v4

      - name: Get the current date
        id: get-date
        run: echo "DATE_TIME_STAMP=$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

      - name: Display Variables and Files
        run: |-
          echo "inputs.envCode=${{ inputs.envCode }}"
          echo "env.generatedResourceGroupName=${{ env.generatedResourceGroupName }}"
          echo "templateFilePath=${{ inputs.templatePath }}${{ inputs.templateFile }}"
          echo "parameterFilePath=${{ inputs.templatePath }}${{ inputs.parameterFile }}"
          echo "bicepDeploymentMode=${{ inputs.bicepDeploymentMode }}"

          echo "vars.APP_NAME=${{ vars.APP_NAME }}"
          echo "vars.RESOURCEGROUP_PREFIX=${{ vars.RESOURCEGROUP_PREFIX }}"
          echo "vars.RESOURCEGROUP_LOCATION=${{ vars.RESOURCEGROUP_LOCATION }}"
          echo "vars.OPENAI_DEPLOY_LOCATION=${{ vars.OPENAI_DEPLOY_LOCATION }}"
          echo "vars.GLOBAL_REGION_CODE=${{ vars.GLOBAL_REGION_CODE }}"
          echo "vars.INSTANCE_NUMBER=${{ vars.INSTANCE_NUMBER }}"
          echo "vars.OWNER_EMAIL=${{ vars.OWNER_EMAIL }}"

          echo "env.loginWithSecret=${{ env.loginWithSecret }}"
          echo "env.loginWithFederatedIdentity=${{ env.loginWithFederatedIdentity }}"
          echo "inputs.loginMethod=${{ inputs.loginMethod }}"

          echo "templatePath=${{ inputs.templatePath }}"
          echo "templateFile=${{ inputs.templateFile }}"
          echo "parameterFile=${{ inputs.parameterFile }}"
          echo "parameterFileReplaceTokens=${{ inputs.parameterFileReplaceTokens }}"
          echo "---------------------------------"
          echo "##[group]All Variables:"
          echo "Environment:"
          echo '${{ toJSON(env) }}'
          echo "Variables:"
          echo '${{ toJSON(vars) }}'
          echo "Secrets:"
          echo '${{ toJSON(secrets) }}'
          echo "Inputs:"
          echo '${{ toJSON(inputs) }}'
          echo "##[endgroup]"
          echo "---------------------------------"
          echo "##[group]Directory of ${{ github.workspace  }}"
          tree -R ${{ github.workspace  }}
          echo "##[endgroup]"
        continue-on-error: true

      - name: Replace Tokens
        if: ${{ inputs.runCreateInfra && inputs.parameterFileReplaceTokens == 'true' }}
        uses: qetza/replacetokens-action@v1
        with:
          sources: '${{ inputs.templatePath }}${{ inputs.parameterFile }}; !local/ => ${{ inputs.parameterFile }}'
          variables: '[${{ toJSON(env) }},${{ toJSON(vars) }},${{ toJSON(secrets) }}]' # use environment & variables & secrets

      - name: Display Param File
        run: |-
          echo "##[group]Contents of ${{ inputs.templatePath }}${{ inputs.parameterFile }}"
          cat ${{ inputs.templatePath }}${{ inputs.parameterFile }}
          echo "##[endgroup]"
        continue-on-error: true

      - name: Determine Azure Authentication Method
        id: auth-check
        env:
          CICD_CLIENT_SECRET: ${{ secrets.CICD_CLIENT_SECRET }}
        run: |
          # Check if we have a client secret or should fall back to OIDC
          if [[ -n "$CICD_CLIENT_SECRET" ]]; then
            echo "auth-method=client-secret" >> $GITHUB_OUTPUT
            echo "Using Client Secret authentication (secret available)"
          else
            echo "auth-method=oidc" >> $GITHUB_OUTPUT            
            echo "Using OIDC authentication"
          fi

      # https://learn.microsoft.com/en-us/entra/workload-id/workload-identity-federation-create-trust
      - name: Login to Azure using OIDC
        if: ${{ steps.auth-check.outputs.auth-method == 'oidc' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CICD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure using Secret
        if: ${{ steps.auth-check.outputs.auth-method == 'client-secret' }}
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.CICD_CLIENT_ID }}","clientSecret":"${{ secrets.CICD_CLIENT_SECRET }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}"}'

      - name: Create Resource Group
        if: ${{ inputs.runCreateInfra && inputs.deployInResourceGroup }}
        run: az group create --name ${{ env.generatedResourceGroupName }} --location ${{ vars.RESOURCEGROUP_LOCATION }} --tags Environment=${{ inputs.envCode }}

      - name: What-If Analysis (RG)
        if: ${{ inputs.runCreateInfra && inputs.deployInResourceGroup && inputs.bicepDeploymentMode == 'whatIf' }}
        id: whatif-analysis-rg
        run: |
          echo "Running what-if analysis..."
          az deployment group what-if \
            --name ${{ inputs.templateFile }}-whatif-rg-${{ vars.RESOURCEGROUP_LOCATION }}-${{ steps.get-date.outputs.DATE_TIME_STAMP}} \
            --resource-group "${{ env.generatedResourceGroupName }}" \
            --template-file "${{ inputs.templatePath }}${{ inputs.templateFile }}" \
            --parameters "${{ inputs.templatePath }}${{ inputs.parameterFile }}" \
            --no-prompt true

      # The azure/arm-deploy action is being deprecated, replaced by azure/bicep-deploy
      # See: https://github.com/Azure/arm-deploy (old) vs https://github.com/azure/bicep-deploy (new)
      # Note: 'failOnStdErr' is not supported in bicep-deploy... will that be an issue in GHA where warnings are treated as errors???
      - name: Deploy Azure Resources (Sub)
        uses: azure/bicep-deploy@v2
        if: ${{ inputs.runCreateInfra && !inputs.deployInResourceGroup && inputs.bicepDeploymentMode != 'whatIf' }}
        id: deploy-bicep-sub
        with:
          scope: subscription
          location: ${{ vars.RESOURCEGROUP_LOCATION }}
          name: ${{ inputs.templateFile }}-sub-${{ vars.RESOURCEGROUP_LOCATION }}-${{ steps.get-date.outputs.DATE_TIME_STAMP}}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          template-file: ${{ inputs.templatePath }}${{ inputs.templateFile }}
          parameters-file: ${{ inputs.templatePath }}${{ inputs.parameterFile }}
          type: deployment
          operation: ${{ inputs.bicepDeploymentMode }} # Must be: create | validate | whatIf

      # The azure/arm-deploy action is being deprecated, replaced by azure/bicep-deploy
      # See: https://github.com/Azure/arm-deploy (old) vs https://github.com/azure/bicep-deploy (new)
      # Note: 'failOnStdErr' is not supported in bicep-deploy... will that be an issue in GHA where warnings are treated as errors???
      - name: Deploy Azure Resources (RG)
        uses: azure/bicep-deploy@v2
        if: ${{ inputs.runCreateInfra && inputs.deployInResourceGroup && inputs.bicepDeploymentMode != 'whatIf' }} 
        id: deploy-bicep-rg
        with:
          scope: resourceGroup
          name: ${{ inputs.templateFile }}-rg-${{ vars.RESOURCEGROUP_LOCATION }}-${{ steps.get-date.outputs.DATE_TIME_STAMP}}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resource-group-name: ${{ env.generatedResourceGroupName }}
          template-file: ${{ inputs.templatePath }}${{ inputs.templateFile }}
          parameters-file: ${{ inputs.templatePath }}${{ inputs.parameterFile }}
          type: deployment
          operation: ${{ inputs.bicepDeploymentMode }} # Must be: create | validate | whatIf
          #location: $ { { vars.RESOURCEGROUP_LOCATION } } # not allowed for RG deploy...

      # # # The azure/arm-deploy action is being deprecated, replaced by azure/bicep-deploy
      # - name: Deploy Azure Resources ARM Task Dep (Sub)
      #   uses: azure/arm-deploy@v2
      #   if: $ { { inputs.runCreateInfra && inputs.useOldBicepTask && !inputs.deployInResourceGroup && inputs.armDeploymentMode != 'Validation' } }
      #   id: deploy-bicep-sub-old
      #   with:
      #     scope: subscription
      #     region: ${{ vars.RESOURCEGROUP_LOCATION }}
      #     deploymentName: ${{ inputs.templateFile }}-sub-${{ vars.RESOURCEGROUP_LOCATION }}-${{ steps.get-date.outputs.DATE_TIME_STAMP}}
      #     template: ${{ inputs.templatePath }}${{ inputs.templateFile }}
      #     parameters: ${{ inputs.templatePath }}${{ inputs.parameterFile }}
      #     deploymentMode: ${{ inputs.armDeploymentMode }} # Must be: Incremental | Complete | Validation
      #     failOnStdErr: false # if set to true, then any warning thrown by Bicep will cause the action to fail
      # - name: Deploy Azure Resources ARM Task Dep (RG)
      #   uses: azure/arm-deploy@v2
      #   if: $ { { inputs.runCreateInfra && inputs.useOldBicepTask && inputs.deployInResourceGroup && inputs.armDeploymentMode != 'Validation' } }
      #   id: deploy-bicep-rg-old
      #   with:
      #     scope: resourcegroup
      #     region: ${{ vars.RESOURCEGROUP_LOCATION }}
      #     deploymentName: ${{ inputs.templateFile }}-rg-${{ vars.RESOURCEGROUP_LOCATION }}-${{ steps.get-date.outputs.DATE_TIME_STAMP}}
      #     resourceGroupName: ${{ env.generatedResourceGroupName }}
      #     template: ${{ inputs.templatePath }}${{ inputs.templateFile }}
      #     parameters: ${{ inputs.templatePath }}${{ inputs.parameterFile }}
      #     deploymentMode: ${{ inputs.armDeploymentMode }} # Must be: Incremental | Complete | Validation
      #     failOnStdErr: false # if set to true, then any warning thrown by Bicep will cause the action to fail

      - name: Display Output
        if: ${{ inputs.runCreateInfra }}
        run: |-
          echo "ACR_NAME=${{ steps.deploy-bicep-rg.outputs.ACR_NAME }}"
          echo "ACR_URL=${{ steps.deploy-bicep-rg.outputs.ACR_URL }}"
          echo "AI_ENDPOINT=${{ steps.deploy-bicep-rg.outputs.AI_ENDPOINT }}"
          echo "AI_HUB_ID=${{ steps.deploy-bicep-rg.outputs.AI_HUB_ID }}"
          echo "AI_HUB_NAME=${{ steps.deploy-bicep-rg.outputs.AI_HUB_NAME }}"
          echo "AI_PROJECT_NAME=${{ steps.deploy-bicep-rg.outputs.AI_PROJECT_NAME }}"
          echo "AI_SEARCH_ENDPOINT=${{ steps.deploy-bicep-rg.outputs.AI_SEARCH_ENDPOINT }}"
          echo "API_CONTAINER_APP_FQDN=${{ steps.deploy-bicep-rg.outputs.API_CONTAINER_APP_FQDN }}"
          echo "API_CONTAINER_APP_NAME=${{ steps.deploy-bicep-rg.outputs.API_CONTAINER_APP_NAME }}"
          echo "UI_CONTAINER_APP_FQDN=${{ steps.deploy-bicep-rg.outputs.UI_CONTAINER_APP_FQDN }}"
          echo "UI_CONTAINER_APP_NAME=${{ steps.deploy-bicep-rg.outputs.UI_CONTAINER_APP_NAME }}"
          echo "API_KEY=${{ steps.deploy-bicep-rg.outputs.API_KEY }}"
          echo "API_MANAGEMENT_ID=${{ steps.deploy-bicep-rg.outputs.API_MANAGEMENT_ID }}"
          echo "API_MANAGEMENT_NAME=${{ steps.deploy-bicep-rg.outputs.API_MANAGEMENT_NAME }}"
          echo "AZURE_CONTAINER_ENVIRONMENT_NAME=${{ steps.deploy-bicep-rg.outputs.AZURE_CONTAINER_ENVIRONMENT_NAME }}"
          echo "AZURE_CONTAINER_REGISTRY_ENDPOINT=${{ steps.deploy-bicep-rg.outputs.AZURE_CONTAINER_REGISTRY_ENDPOINT }}"
          echo "AZURE_CONTAINER_REGISTRY_NAME=${{ steps.deploy-bicep-rg.outputs.AZURE_CONTAINER_REGISTRY_NAME }}"
          echo "AZURE_RESOURCE_GROUP=${{ steps.deploy-bicep-rg.outputs.AZURE_RESOURCE_GROUP }}"
          echo "COSMOS_CONTAINER_NAME=${{ steps.deploy-bicep-rg.outputs.COSMOS_CONTAINER_NAME }}"
          echo "COSMOS_DATABASE_NAME=${{ steps.deploy-bicep-rg.outputs.COSMOS_DATABASE_NAME }}"
          echo "COSMOS_ENDPOINT=${{ steps.deploy-bicep-rg.outputs.COSMOS_ENDPOINT }}"
          echo "DOCUMENT_INTELLIGENCE_ENDPOINT=${{ steps.deploy-bicep-rg.outputs.DOCUMENT_INTELLIGENCE_ENDPOINT }}"
          echo "MANAGED_ENVIRONMENT_ID=${{ steps.deploy-bicep-rg.outputs.MANAGED_ENVIRONMENT_ID }}"
          echo "MANAGED_ENVIRONMENT_NAME=${{ steps.deploy-bicep-rg.outputs.MANAGED_ENVIRONMENT_NAME }}"
          echo "RESOURCE_TOKEN=${{ steps.deploy-bicep-rg.outputs.RESOURCE_TOKEN }}"
          echo "STORAGE_ACCOUNT_CONTAINER=${{ steps.deploy-bicep-rg.outputs.STORAGE_ACCOUNT_CONTAINER }}"
          echo "STORAGE_ACCOUNT_NAME=${{ steps.deploy-bicep-rg.outputs.STORAGE_ACCOUNT_NAME }}"
          echo "VNET_CORE_ID=${{ steps.deploy-bicep-rg.outputs.VNET_CORE_ID }}"
          echo "VNET_CORE_NAME=${{ steps.deploy-bicep-rg.outputs.VNET_CORE_NAME }}"
          echo "VNET_CORE_PREFIX=${{ steps.deploy-bicep-rg.outputs.VNET_CORE_PREFIX }}"
        continue-on-error: true

      - name: Write summary
        if: ${{ inputs.runCreateInfra }}
        env:
          SUMMARY: |
            # Deployment summary
            - Resource Group: ${{ env.generatedResourceGroupName }}
            - Environment: ${{ inputs.envCode }}
            - Region: ${{ vars.GLOBAL_REGION_CODE }}
            - Instance: ${{ vars.INSTANCE_NUMBER }}

        run: echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true
