# ------------------------------------------------------------------------------------------------------------------------
# Reusable Workflow: Deploy Azure Resources Only
# ------------------------------------------------------------------------------------------------------------------------
name: z_template_deploy_infra
run-name: Deploy Bicep

on:
  workflow_call:
    inputs:
      envCode:
        required: true
        type: string
      templatePath:
        required: false
        type: string
        default: 'infra/bicep/'
      templateFile:
        required: false
        type: string
        default: 'main-advanced.bicep'
      parameterFile:
        required: false
        type: string
        default: ''
      parameterFileReplaceTokens:
        required: false
        type: string
        default: 'false'
      deploymentMode:
        required: false
        type: string
        default: 'Incremental'
      runCreateInfra:
        required: false
        default: true
        type: boolean
      deployInResourceGroup:
        required: false
        default: true
        type: boolean
      loginUsingClientSecret:
        description: Login using Client Secret?
        type: boolean
        default: false

# ------------------------------------------------------------------------------------------------------------------------
jobs:
  deploy:
    name: Deploy Bicep
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.envCode }}
    permissions:
      id-token: write
      contents: read
      actions: read
      pages: write    # ------------------------------------------------------------------------------------------------------------------------
    # Variables
    # ------------------------------------------------------------------------------------------------------------------------
    
    env:
      envCode: ${{ inputs.envCode }}
      generatedResourceGroupName: ${{ vars.RESOURCEGROUP_PREFIX }}-${{ inputs.envCode }}-${{ vars.GLOBAL_REGION_CODE }}-${{ vars.INSTANCE_NUMBER }}
      loginWithFederatedIdentity: ${{ secrets.CICD_CLIENT_SECRET == '' && 'true' || 'false' }}
      loginWithSecret: ${{ secrets.CICD_CLIENT_SECRET != '' && 'true' || 'false' }}
      
      # Infrastructure Configuration (hardcoded to avoid 10-parameter limit)
      createResourceGroup: false
      publicAccessEnabled: false
      createDnsZones: false
      deployAIHub: false
      addRoleAssignments: true
      runBuildDeployAPI: false
      requestorName: ${{ github.actor }}
      
      # Deployment Stack Environment Variables (hardcoded - no input parameters to avoid 10-param limit)
      stackAction: ""  # Options: deploy, status, rollback, delete (empty = ARM deployment)
      stackName: ${{ format('stack-{0}-{1}-{2}', vars.APP_NAME, inputs.envCode, vars.INSTANCE_NUMBER) }}
      denySettingsMode: "denyWriteAndDelete"
      enableDriftDetection: "true"
      rollbackOnFailure: "true"

    # ------------------------------------------------------------------------------------------------------------------------
    # Outputs
    # ------------------------------------------------------------------------------------------------------------------------
    outputs:
      HUB_ID: ${{ steps.deploy-bicep-rg.outputs.AI_HUB_ID }}
      HUB_NAME: ${{ steps.deploy-bicep-rg.outputs.AI_HUB_NAME }}

    # ------------------------------------------------------------------------------------------------------------------------
    # Actions
    # ------------------------------------------------------------------------------------------------------------------------
    steps:
      - name: Checkout Code
        if: ${{ inputs.runCreateInfra }}
        uses: actions/checkout@v4

      - name: Get the current date
        id: get-date
        run: echo "DATE_TIME_STAMP=$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

      - name: Display Variables and Files
        run: |-
          echo "inputs.envCode=${{ inputs.envCode }}"
          echo "env.generatedResourceGroupName=${{ env.generatedResourceGroupName }}"
          echo "templateFilePath=${{ inputs.templatePath }}${{ inputs.templateFile }}"
          echo "parameterFilePath=${{ inputs.templatePath }}${{ inputs.parameterFile }}"
          echo "vars.APP_NAME=${{ vars.APP_NAME }}"
          echo "vars.RESOURCEGROUP_PREFIX=${{ vars.RESOURCEGROUP_PREFIX }}"
          echo "vars.RESOURCEGROUP_LOCATION=${{ vars.RESOURCEGROUP_LOCATION }}"
          echo "vars.OPENAI_DEPLOY_LOCATION=${{ vars.OPENAI_DEPLOY_LOCATION }}"
          echo "vars.GLOBAL_REGION_CODE=${{ vars.GLOBAL_REGION_CODE }}"
          echo "vars.INSTANCE_NUMBER=${{ vars.INSTANCE_NUMBER }}"
          echo "env.loginWithSecret=${{ env.loginWithSecret }}"
          echo "env.loginWithFederatedIdentity=${{ env.loginWithFederatedIdentity }}"
          echo "inputs.loginUsingClientSecret=${{ inputs.loginUsingClientSecret }}"
          echo "templatePath=${{ inputs.templatePath }}"
          echo "templateFile=${{ inputs.templateFile }}"
          echo "parameterFile=${{ inputs.parameterFile }}"
          echo "parameterFileReplaceTokens=${{ inputs.parameterFileReplaceTokens }}"
          echo "---------------------------------"
          echo "##[group]All Variables:"
          echo "Environment:"
          echo '${{ toJSON(env) }}'
          echo "Variables:"
          echo '${{ toJSON(vars) }}'
          echo "Secrets:"
          echo '${{ toJSON(secrets) }}'
          echo "Inputs:"
          echo '${{ toJSON(inputs) }}'
          echo "##[endgroup]"
          echo "---------------------------------"
          echo "##[group]Directory of ${{ github.workspace  }}"
          tree -R ${{ github.workspace  }}
          echo "##[endgroup]"
        continue-on-error: true

      - name: Replace Tokens
        if: ${{ inputs.runCreateInfra && inputs.parameterFileReplaceTokens == 'true' }}
        uses: qetza/replacetokens-action@v1
        with:
          sources: '${{ inputs.templatePath }}${{ inputs.parameterFile }}; !local/ => ${{ inputs.parameterFile }}'
          variables: '[${{ toJSON(env) }},${{ toJSON(vars) }},${{ toJSON(secrets) }}]'

      - name: Display Param File
        run: |-
          echo "##[group]Contents of ${{ inputs.templatePath }}${{ inputs.parameterFile }}"
          cat ${{ inputs.templatePath }}${{ inputs.parameterFile }}
          echo "##[endgroup]"
        continue-on-error: true

      - name: OIDC Login to Azure
        if: ${{ !inputs.loginUsingClientSecret }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CICD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure with Secret
        if: ${{ inputs.loginUsingClientSecret }}
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.CICD_CLIENT_ID }}","clientSecret":"${{ secrets.CICD_CLIENT_SECRET }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}"}'

      - name: Create Resource Group
        if: ${{ inputs.runCreateInfra && inputs.deployInResourceGroup }}
        run: az group create --name ${{ env.generatedResourceGroupName }} --location ${{ vars.RESOURCEGROUP_LOCATION }} --tags Environment=${{ inputs.envCode }}

      # ========================================================================================================
      # DEPLOYMENT STACK OPERATIONS
      # ========================================================================================================
      
      - name: Install Azure CLI Stack Extension
        if: ${{ env.stackAction != '' }}
        run: |
          echo "Installing Azure CLI stack extension..."
          az extension add --name stack --only-show-errors
          echo "Stack extension installed successfully"

      - name: Deploy with Deployment Stack
        if: ${{ env.stackAction == 'deploy' }}
        id: deploy-stack
        run: |
          echo "=== Deploying with Azure Deployment Stack ==="
          echo "Stack Name: ${{ env.stackName }}"
          echo "Resource Group: ${{ env.generatedResourceGroupName }}"
          echo "Template: ${{ inputs.templatePath }}${{ inputs.templateFile }}"
          
          # Check if stack already exists
          if az stack group show --name "${{ env.stackName }}" --resource-group "${{ env.generatedResourceGroupName }}" >/dev/null 2>&1; then
            echo "Stack exists - performing update"
            STACK_EXISTS=true
          else
            echo "Creating new stack"
            STACK_EXISTS=false
          fi
          
          # Build deployment command
          DEPLOY_CMD="az stack group create \
            --name '${{ env.stackName }}' \
            --resource-group '${{ env.generatedResourceGroupName }}' \
            --template-file '${{ inputs.templatePath }}${{ inputs.templateFile }}' \
            --deny-settings-mode '${{ env.denySettingsMode }}' \
            --deny-settings-excluded-principals '${{ secrets.CICD_CLIENT_ID }}' \
            --action-on-unmanage deleteAll"
          
          # Add parameters if provided
          if [ -n "${{ inputs.parameterFile }}" ]; then
            DEPLOY_CMD="$DEPLOY_CMD --parameters '${{ inputs.templatePath }}${{ inputs.parameterFile }}'"
          fi
          
          # Add runtime parameters
          DEPLOY_CMD="$DEPLOY_CMD --parameters \
            environmentName='${{ inputs.envCode }}' \
            regionCode='${{ vars.GLOBAL_REGION_CODE }}' \
            instanceNumber='${{ vars.INSTANCE_NUMBER }}' \
            createDnsZones=${{ env.createDnsZones }} \
            publicAccessEnabled=${{ env.publicAccessEnabled }} \
            deployAIHub=${{ env.deployAIHub }} \
            addRoleAssignments=${{ env.addRoleAssignments }}"
          
          echo "Executing: $DEPLOY_CMD"
          
          # Execute deployment with error handling
          if DEPLOYMENT_OUTPUT=$(eval $DEPLOY_CMD --output json); then
            echo "Stack deployment completed successfully"
            
            # Extract key outputs
            STACK_ID=$(echo $DEPLOYMENT_OUTPUT | jq -r '.id // empty')
            echo "stack_id=$STACK_ID" >> $GITHUB_OUTPUT
            echo "stack_exists=$STACK_EXISTS" >> $GITHUB_OUTPUT
            
            # Extract Bicep outputs if available
            if echo $DEPLOYMENT_OUTPUT | jq -e '.properties.outputs' > /dev/null 2>&1; then
              echo "AI_HUB_ID=$(echo $DEPLOYMENT_OUTPUT | jq -r '.properties.outputs.AI_HUB_ID.value // empty')" >> $GITHUB_OUTPUT
              echo "AI_HUB_NAME=$(echo $DEPLOYMENT_OUTPUT | jq -r '.properties.outputs.AI_HUB_NAME.value // empty')" >> $GITHUB_OUTPUT
              echo "ACR_NAME=$(echo $DEPLOYMENT_OUTPUT | jq -r '.properties.outputs.ACR_NAME.value // empty')" >> $GITHUB_OUTPUT
              echo "VNET_CORE_ID=$(echo $DEPLOYMENT_OUTPUT | jq -r '.properties.outputs.VNET_CORE_ID.value // empty')" >> $GITHUB_OUTPUT
            fi
            
            echo "✅ Stack deployment completed successfully"
          else
            echo "❌ Stack deployment failed"
            exit 1
          fi

      - name: Get Stack Status
        if: ${{ env.stackAction == 'status' }}
        run: |
          echo "=== Getting Deployment Stack Status ==="
          echo "Stack: ${{ env.stackName }}"
          echo "Resource Group: ${{ env.generatedResourceGroupName }}"
          
          if az stack group show --name "${{ env.stackName }}" --resource-group "${{ env.generatedResourceGroupName }}" >/dev/null 2>&1; then
            echo "=== Stack Information ==="
            az stack group show --name "${{ env.stackName }}" --resource-group "${{ env.generatedResourceGroupName }}" --output table
            
            echo ""
            echo "=== Recent Deployments ==="
            az stack group list-deployments --name "${{ env.stackName }}" --resource-group "${{ env.generatedResourceGroupName }}" --output table
            
            echo ""
            echo "=== Managed Resources ==="
            az stack group show --name "${{ env.stackName }}" --resource-group "${{ env.generatedResourceGroupName }}" --query "properties.resources[].id" --output table
          else
            echo "❌ Stack '${{ env.stackName }}' not found"
            exit 1
          fi

      - name: Rollback Stack
        if: ${{ env.stackAction == 'rollback' }}
        run: |
          echo "🔄 Starting deployment stack rollback process..."
          echo "Stack: ${{ env.stackName }}"
          echo "Resource Group: ${{ env.generatedResourceGroupName }}"
          
          # Check if stack exists
          if ! az stack group show --name "${{ env.stackName }}" --resource-group "${{ env.generatedResourceGroupName }}" >/dev/null 2>&1; then
            echo "❌ Stack '${{ env.stackName }}' not found - cannot rollback"
            exit 1
          fi
          
          # Get deployment history
          echo "=== Getting deployment history ==="
          DEPLOYMENTS=$(az stack group list-deployments \
            --name "${{ env.stackName }}" \
            --resource-group "${{ env.generatedResourceGroupName }}" \
            --query "[?properties.provisioningState=='Succeeded'] | sort_by(@, &properties.timestamp)" \
            --output json)
          
          DEPLOYMENT_COUNT=$(echo $DEPLOYMENTS | jq length)
          echo "Found $DEPLOYMENT_COUNT successful deployments"
          
          if [ "$DEPLOYMENT_COUNT" -lt 2 ]; then
            echo "❌ No previous successful deployment found for rollback"
            exit 1
          fi
          
          echo "⚠️ ROLLBACK SIMULATION - Template versioning required for true rollback"
          echo "Previous deployments available for reference:"
          az stack group list-deployments --name "${{ env.stackName }}" --resource-group "${{ env.generatedResourceGroupName }}" --query "[?properties.provisioningState=='Succeeded']" --output table

      - name: Delete Stack
        if: ${{ env.stackAction == 'delete' }}
        run: |
          echo "⚠️ WARNING: Deleting deployment stack '${{ env.stackName }}'"
          echo "This will remove ALL managed resources!"
          
          if az stack group show --name "${{ env.stackName }}" --resource-group "${{ env.generatedResourceGroupName }}" >/dev/null 2>&1; then
            # Show what will be deleted
            echo "=== Resources to be deleted ==="
            az stack group show --name "${{ env.stackName }}" --resource-group "${{ env.generatedResourceGroupName }}" --query "properties.resources[].id" --output table
            
            # Perform deletion
            az stack group delete \
              --name "${{ env.stackName }}" \
              --resource-group "${{ env.generatedResourceGroupName }}" \
              --action-on-unmanage deleteAll \
              --yes
            
            echo "✅ Stack deleted successfully"
          else
            echo "❌ Stack not found"
            exit 1
          fi

      - name: Rollback on Failure (Stack)
        if: ${{ failure() && env.rollbackOnFailure == 'true' && env.stackAction != '' }}
        run: |
          echo "🚨 Stack deployment failed - attempting cleanup..."
          echo "Stack Name: ${{ env.stackName }}"
          echo "Resource Group: ${{ env.generatedResourceGroupName }}"
          
          if [ "${{ steps.deploy-stack.outputs.stack_exists }}" != "true" ]; then
            echo "No previous version - cleaning up failed resources"
            az stack group delete --name "${{ env.stackName }}" --resource-group "${{ env.generatedResourceGroupName }}" --action-on-unmanage deleteAll --yes || true
            echo "Failed stack resources cleaned up"
          else
            echo "Previous stack exists - manual intervention required for rollback"
          fi

      # ========================================================================================================
      # TRADITIONAL ARM DEPLOYMENT (Fallback)
      # ========================================================================================================

      - name: Deploy Azure Resources (Sub)
        uses: azure/arm-deploy@v2
        if: ${{ inputs.runCreateInfra && !inputs.deployInResourceGroup && env.stackAction == '' }}
        id: deploy-bicep-sub
        with:
          scope: subscription
          region: ${{ vars.RESOURCEGROUP_LOCATION }}
          deploymentName: ${{ inputs.templateFile }}-sub-${{ vars.RESOURCEGROUP_LOCATION }}-${{ steps.get-date.outputs.DATE_TIME_STAMP}}
          template: ${{ inputs.templatePath }}${{ inputs.templateFile }}
          parameters: ${{ inputs.templatePath }}${{ inputs.parameterFile }}
          deploymentMode: ${{ inputs.deploymentMode }}

      - name: Deploy Azure Resources (RG)
        uses: azure/arm-deploy@v2
        if: ${{ inputs.runCreateInfra && inputs.deployInResourceGroup && env.stackAction == '' }}
        id: deploy-bicep-rg
        with:
          scope: resourcegroup
          region: ${{ vars.RESOURCEGROUP_LOCATION }}
          deploymentName: ${{ inputs.templateFile }}-rg-${{ vars.RESOURCEGROUP_LOCATION }}-${{ steps.get-date.outputs.DATE_TIME_STAMP}}
          resourceGroupName: ${{ env.generatedResourceGroupName }}
          template: ${{ inputs.templatePath }}${{ inputs.templateFile }}
          parameters: ${{ inputs.templatePath }}${{ inputs.parameterFile }}
          deploymentMode: ${{ inputs.deploymentMode }}

      - name: Display Output
        if: ${{ inputs.runCreateInfra }}
        run: |-
          echo "ACR_NAME=${{ steps.deploy-bicep-rg.outputs.ACR_NAME }}"
          echo "ACR_URL=${{ steps.deploy-bicep-rg.outputs.ACR_URL }}"
          echo "AI_ENDPOINT=${{ steps.deploy-bicep-rg.outputs.AI_ENDPOINT }}"
          echo "AI_HUB_ID=${{ steps.deploy-bicep-rg.outputs.AI_HUB_ID }}"
          echo "AI_HUB_NAME=${{ steps.deploy-bicep-rg.outputs.AI_HUB_NAME }}"
          echo "AI_SEARCH_ENDPOINT=${{ steps.deploy-bicep-rg.outputs.AI_SEARCH_ENDPOINT }}"
          echo "UI_CONTAINER_APP_FQDN=${{ steps.deploy-bicep-rg.outputs.UI_CONTAINER_APP_FQDN }}"
          echo "UI_CONTAINER_APP_NAME=${{ steps.deploy-bicep-rg.outputs.UI_CONTAINER_APP_NAME }}"
          echo "API_KEY=${{ steps.deploy-bicep-rg.outputs.API_KEY }}"
          echo "AZURE_CONTAINER_ENVIRONMENT_NAME=${{ steps.deploy-bicep-rg.outputs.AZURE_CONTAINER_ENVIRONMENT_NAME }}"
          echo "AZURE_CONTAINER_REGISTRY_ENDPOINT=${{ steps.deploy-bicep-rg.outputs.AZURE_CONTAINER_REGISTRY_ENDPOINT }}"
          echo "AZURE_CONTAINER_REGISTRY_NAME=${{ steps.deploy-bicep-rg.outputs.AZURE_CONTAINER_REGISTRY_NAME }}"
          echo "AZURE_RESOURCE_GROUP=${{ steps.deploy-bicep-rg.outputs.AZURE_RESOURCE_GROUP }}"
          echo "COSMOS_CONTAINER_NAME=${{ steps.deploy-bicep-rg.outputs.COSMOS_CONTAINER_NAME }}"
          echo "COSMOS_DATABASE_NAME=${{ steps.deploy-bicep-rg.outputs.COSMOS_DATABASE_NAME }}"
          echo "COSMOS_ENDPOINT=${{ steps.deploy-bicep-rg.outputs.COSMOS_ENDPOINT }}"
          echo "DOCUMENT_INTELLIGENCE_ENDPOINT=${{ steps.deploy-bicep-rg.outputs.DOCUMENT_INTELLIGENCE_ENDPOINT }}"
          echo "MANAGED_ENVIRONMENT_ID=${{ steps.deploy-bicep-rg.outputs.MANAGED_ENVIRONMENT_ID }}"
          echo "MANAGED_ENVIRONMENT_NAME=${{ steps.deploy-bicep-rg.outputs.MANAGED_ENVIRONMENT_NAME }}"
          echo "RESOURCE_TOKEN=${{ steps.deploy-bicep-rg.outputs.RESOURCE_TOKEN }}"
          echo "STORAGE_ACCOUNT_CONTAINER=${{ steps.deploy-bicep-rg.outputs.STORAGE_ACCOUNT_CONTAINER }}"
          echo "STORAGE_ACCOUNT_NAME=${{ steps.deploy-bicep-rg.outputs.STORAGE_ACCOUNT_NAME }}"
          echo "VNET_CORE_ID=${{ steps.deploy-bicep-rg.outputs.VNET_CORE_ID }}"
          echo "VNET_CORE_NAME=${{ steps.deploy-bicep-rg.outputs.VNET_CORE_NAME }}"
          echo "VNET_CORE_PREFIX=${{ steps.deploy-bicep-rg.outputs.VNET_CORE_PREFIX }}"
        continue-on-error: true

      - name: Write summary
        if: ${{ inputs.runCreateInfra }}
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # Deployment summary
          - Resource Group: ${{ env.generatedResourceGroupName }}
          - AI Hub Name: ${{ steps.deploy-bicep-rg.outputs.AI_HUB_NAME }}
          - API URL: [${{ steps.deploy-bicep-rg.outputs.UI_CONTAINER_APP_FQDN }}](${{ steps.deploy-bicep-rg.outputs.UI_CONTAINER_APP_FQDN }})
          EOF
        continue-on-error: true
