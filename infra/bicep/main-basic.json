{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "8189785110242422533"
    }
  },
  "parameters": {
    "applicationName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Full Application Name (supply this or use default of prefix+token)"
      }
    },
    "applicationPrefix": {
      "type": "string",
      "defaultValue": "ai_doc",
      "metadata": {
        "description": "If you do not supply Application Name, this prefix will be combined with a token to create a unique applicationName"
      }
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "dev",
      "metadata": {
        "description": "The environment code (i.e. dev, qa, prod)"
      }
    },
    "azdEnvName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Environment name used by the azd command (optional)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "openAI_deploy_location": {
      "type": "string",
      "defaultValue": "[parameters('location')]",
      "metadata": {
        "description": "OAI Region availability: East US, East US2, North Central US, South Central US, Sweden Central, West US, and West US3"
      }
    },
    "myIpAddress": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "My IP address for network access"
      }
    },
    "principalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Id of the user executing the deployment"
      }
    },
    "appContainerAppEnvironmentWorkloadProfileName": {
      "type": "string",
      "defaultValue": "app",
      "metadata": {
        "description": "Name of the Container Apps Environment workload profile to use for the app"
      }
    },
    "containerAppEnvironmentWorkloadProfiles": {
      "type": "array",
      "defaultValue": [
        {
          "name": "app",
          "workloadProfileType": "D4",
          "minimumCount": 1,
          "maximumCount": 10
        }
      ],
      "metadata": {
        "description": "Workload profiles for the Container Apps environment"
      }
    },
    "aiProjectFriendlyName": {
      "type": "string",
      "defaultValue": "Agents Project resource",
      "metadata": {
        "description": "Friendly name for your Azure AI resource"
      }
    },
    "aiProjectDescription": {
      "type": "string",
      "defaultValue": "This is an example AI Project resource for use in Azure AI Studio.",
      "metadata": {
        "description": "Description of your Azure AI resource displayed in AI studio"
      }
    },
    "deployAIHub": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Should we deploy an AI Foundry Hub?"
      }
    },
    "deployAPIM": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Should we deploy an APIM?"
      }
    },
    "apimSubscriptionName": {
      "type": "string",
      "defaultValue": "aiagent-subscription",
      "metadata": {
        "description": "Name of the APIM Subscription. Defaults to aiagent-subscription"
      }
    },
    "apimPublisherEmail": {
      "type": "string",
      "defaultValue": "somebody@somewhere.com",
      "metadata": {
        "description": "Email of the APIM Publisher"
      }
    },
    "adminPublisherName": {
      "type": "string",
      "defaultValue": "AI Agent Admin",
      "metadata": {
        "description": "Name of the APIM Publisher"
      }
    },
    "apiImageName": {
      "type": "string",
      "defaultValue": ""
    },
    "batchImageName": {
      "type": "string",
      "defaultValue": ""
    },
    "publicAccessEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Should resources be created with public access?"
      }
    },
    "createDnsZones": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Create DNS Zones?"
      }
    },
    "addRoleAssignments": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Add Role Assignments for the user assigned identity?"
      }
    },
    "deduplicateKeyVaultSecrets": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Should we run a script to dedupe the KeyVault secrets? (this fails on private networks right now)"
      }
    },
    "appendResourceTokens": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Set this if you want to append all the resource names with a unique token"
      }
    },
    "deployAPIApp": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Should API container app be deployed?"
      }
    },
    "deployBatchApp": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Should Batch container app be deployed?"
      }
    },
    "regionCode": {
      "type": "string",
      "defaultValue": "AM",
      "allowedValues": [
        "AM",
        "EM",
        "AP",
        "CH"
      ],
      "metadata": {
        "description": "Global Region where the resources will be deployed, e.g. AM (America), EM (EMEA), AP (APAC), CH (China)"
      }
    },
    "instanceNumber": {
      "type": "string",
      "defaultValue": "001",
      "metadata": {
        "description": "Instance number for the application, e.g. 001, 002, etc. This is used to differentiate multiple instances of the same application in the same environment."
      }
    },
    "costCenterTag": {
      "type": "string",
      "defaultValue": ""
    },
    "ownerEmailTag": {
      "type": "string",
      "defaultValue": ""
    },
    "requestorName": {
      "type": "string",
      "defaultValue": "UNKNOWN"
    },
    "applicationId": {
      "type": "string",
      "defaultValue": ""
    },
    "primarySupportProviderTag": {
      "type": "string",
      "defaultValue": ""
    },
    "runDateTime": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    }
  },
  "variables": {
    "resourceToken": "[toLower(uniqueString(resourceGroup().id, parameters('location')))]",
    "resourceGroupName": "[resourceGroup().name]",
    "appName": "[if(not(equals(parameters('applicationName'), '')), parameters('applicationName'), format('{0}_{1}', parameters('applicationPrefix'), variables('resourceToken')))]",
    "deploymentSuffix": "[format('-{0}', parameters('runDateTime'))]",
    "commonTags": {
      "creation-date": "[take(parameters('runDateTime'), 8)]",
      "application-name": "[variables('appName')]",
      "application-id": "[parameters('applicationId')]",
      "environment-name": "[parameters('environmentName')]",
      "global-region": "[parameters('regionCode')]",
      "requestor-name": "[parameters('requestorName')]",
      "primary-support-provider": "[if(equals(parameters('primarySupportProviderTag'), ''), 'UNKNOWN', parameters('primarySupportProviderTag'))]"
    },
    "costCenterTagObject": "[if(equals(parameters('costCenterTag'), ''), createObject(), createObject('cost-center', parameters('costCenterTag')))]",
    "ownerEmailTagObject": "[if(equals(parameters('ownerEmailTag'), ''), createObject(), createObject('application-owner', parameters('ownerEmailTag'), 'business-owner', parameters('ownerEmailTag'), 'point-of-contact', parameters('ownerEmailTag')))]",
    "azdTag": "[if(not(equals(parameters('azdEnvName'), '')), createObject('azd-env-name', parameters('azdEnvName')), createObject())]",
    "tags": "[union(variables('commonTags'), variables('azdTag'), variables('costCenterTagObject'), variables('ownerEmailTagObject'))]",
    "deduplicateKVSecrets": "[if(parameters('publicAccessEnabled'), parameters('deduplicateKeyVaultSecrets'), false())]",
    "apiKeyValue": "[uniqueString(resourceGroup().id, parameters('location'), 'api-key', parameters('runDateTime'))]",
    "uiDatabaseName": "ChatHistory",
    "uiChatContainerName": "ChatTurn",
    "uiChatContainerName2": "ChatHistory",
    "cosmosContainerArray": [
      {
        "name": "AgentLog",
        "partitionKey": "/requestId"
      },
      {
        "name": "UserDocuments",
        "partitionKey": "/userId"
      },
      {
        "name": "[variables('uiChatContainerName')]",
        "partitionKey": "/chatId"
      },
      {
        "name": "[variables('uiChatContainerName2')]",
        "partitionKey": "/chatId"
      }
    ],
    "apiTargetPort": 8080,
    "batchTargetPort": 8080
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('resource-names{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationName": {
            "value": "[variables('appName')]"
          },
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "resourceToken": "[if(parameters('appendResourceTokens'), createObject('value', variables('resourceToken')), createObject('value', ''))]",
          "regionCode": {
            "value": "[parameters('regionCode')]"
          },
          "instance": {
            "value": "[parameters('instanceNumber')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "462312225031717030"
            }
          },
          "parameters": {
            "applicationName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Application name unique to this application, typically 5-8 characters."
              }
            },
            "environmentName": {
              "type": "string",
              "defaultValue": "dev",
              "metadata": {
                "description": "Environment name for the application, e.g. azd, dev, demo, qa, stg, ct, prod. This is used to differentiate resources in different environments."
              }
            },
            "regionCode": {
              "type": "string",
              "defaultValue": "AM",
              "allowedValues": [
                "AM",
                "EM",
                "AP",
                "CH"
              ],
              "metadata": {
                "description": "Global Region where the resources will be deployed, e.g. AM (America), EM (EMEA), AP (APAC), CH (China)"
              }
            },
            "instance": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Instance number for the application, e.g. 001, 002, etc. This is used to differentiate multiple instances of the same application in the same environment."
              }
            },
            "resourceToken": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional resource token to ensure uniqueness - leave blank if desired"
              }
            }
          },
          "variables": {
            "$fxv#0": {
              "analysisServicesServers": "as",
              "apiManagementService": "apim",
              "apiManagementService-prefix": "apim-",
              "appConfigurationConfigurationStores": "appcs",
              "appConfigurationConfigurationStores-prefix": "appcs-",
              "appManagedEnvironments": "cae",
              "appManagedEnvironments-prefix": "cae-",
              "appRegistration": "appreg",
              "appRegistration-prefix": "appreg-",
              "appContainerApps": "ca",
              "appContainerApps-prefix": "ca-",
              "authorizationPolicyDefinitions": "policy-",
              "automationAutomationAccounts": "aa-",
              "blueprintBlueprints": "bp-",
              "blueprintBlueprintsArtifacts": "bpa-",
              "cacheRedis": "redis-",
              "cdnProfiles": "cdnp-",
              "cdnProfilesEndpoints": "cdne-",
              "cognitiveServicesAccounts": "cog",
              "cognitiveServicesAccounts-prefix": "cog-",
              "cognitiveServicesFoundry": "ai-foundry",
              "cognitiveServicesFoundry-prefix": "ai-foundry-",
              "cognitiveServicesFormRecognizer": "cog-fr",
              "cognitiveServicesFormRecognizer-prefix": "cog-fr-",
              "cognitiveServicesHub": "hub",
              "cognitiveServicesAIHub": "ai-hub",
              "cognitiveServicesHubProject": "ai-foundry-hub-proj",
              "cognitiveServicesFoundryProject": "ai-foundry-proj",
              "cognitiveServicesTextAnalytics": "cog-ta-",
              "computeAvailabilitySets": "avail-",
              "computeCloudServices": "cld-",
              "computeDiskEncryptionSets": "des",
              "computeDisks": "disk",
              "computeDisksOs": "osdisk",
              "computeGalleries": "gal",
              "computeSnapshots": "snap-",
              "computeVirtualMachines": "vm",
              "computeVirtualMachineScaleSets": "vmss-",
              "containerInstanceContainerGroups": "ci",
              "containerRegistryRegistries": "cr",
              "containerServiceManagedClusters": "aks-",
              "databricksWorkspaces": "dbw-",
              "dataFactoryFactories": "adf-",
              "dataLakeAnalyticsAccounts": "dla",
              "dataLakeStoreAccounts": "dls",
              "dataMigrationServices": "dms-",
              "dBforMySQLServers": "mysql-",
              "dBforPostgreSQLServers": "psql-",
              "devicesIotHubs": "iot-",
              "devicesProvisioningServices": "provs-",
              "devicesProvisioningServicesCertificates": "pcert-",
              "documentDBDatabaseAccounts": "cosmos",
              "documentDBDatabaseAccounts-prefix": "cosmos-",
              "documentIntelligence": "docin",
              "documentIntelligence-prefix": "docin-",
              "eventGridDomains": "evgd-",
              "eventGridDomainsTopics": "evgt-",
              "eventGridEventSubscriptions": "evgs-",
              "eventGridSystemTopic": "evgst-",
              "eventHubNamespaces": "evhns-",
              "eventHubNamespacesEventHubs": "evh-",
              "hdInsightClustersHadoop": "hadoop-",
              "hdInsightClustersHbase": "hbase-",
              "hdInsightClustersKafka": "kafka-",
              "hdInsightClustersMl": "mls-",
              "hdInsightClustersSpark": "spark-",
              "hdInsightClustersStorm": "storm-",
              "hybridComputeMachines": "arcs-",
              "insightsActionGroups": "ag-",
              "insightsComponents": "appi",
              "insightsComponents-prefix": "appi-",
              "keyVaultVaults": "kv",
              "keyVaultVaults-prefix": "kv-",
              "kubernetesConnectedClusters": "arck",
              "kustoClusters": "dec",
              "kustoClustersDatabases": "dedb",
              "logicIntegrationAccounts": "ia",
              "logicIntegrationAccounts-prefix": "ia-",
              "logicWorkflows": "logic",
              "logicWorkflows-prefix": "logic-",
              "machineLearningServicesWorkspaces": "mlw-",
              "managedIdentityUserAssignedIdentities": "id",
              "managedIdentityUserAssignedIdentities-prefix": "id-",
              "managementManagementGroups": "mg-",
              "migrateAssessmentProjects": "migr-",
              "networkApplicationGateways": "agw-",
              "networkApplicationSecurityGroups": "asg-",
              "networkAzureFirewalls": "afw-",
              "networkBastionHosts": "bas-",
              "bastionPip": "bastion",
              "networkConnections": "con-",
              "networkDnsZones": "dnsz-",
              "networkExpressRouteCircuits": "erc-",
              "networkFirewallPolicies": "afwp-",
              "networkFirewallPoliciesWebApplication": "waf",
              "networkFirewallPoliciesRuleGroups": "wafrg",
              "networkFrontDoors": "fd-",
              "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
              "networkLoadBalancersExternal": "lbe-",
              "networkLoadBalancersInternal": "lbi-",
              "networkLoadBalancersInboundNatRules": "rule-",
              "networkLocalNetworkGateways": "lgw-",
              "networkNatGateways": "ng-",
              "networkNetworkInterfaces": "nic-",
              "networkNetworkSecurityGroups": "nsg-",
              "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
              "networkNetworkWatchers": "nw-",
              "networkPrivateDnsZones": "pdnsz-",
              "networkPrivateLinkServices": "pl-",
              "networkPublicIPAddresses": "pip-",
              "networkPublicIPPrefixes": "ippre-",
              "networkRouteFilters": "rf-",
              "networkRouteTables": "rt-",
              "networkRouteTablesRoutes": "udr-",
              "networkTrafficManagerProfiles": "traf-",
              "networkVirtualNetworkGateways": "vgw-",
              "networkVirtualNetworks": "vnet",
              "networkVirtualNetworks-prefix": "vnet-",
              "networkVirtualNetworksSubnets": "snet",
              "networkVirtualNetworksSubnets-prefix": "snet-",
              "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
              "networkVirtualWans": "vwan-",
              "networkVpnGateways": "vpng-",
              "networkVpnGatewaysVpnConnections": "vcn-",
              "networkVpnGatewaysVpnSites": "vst-",
              "notificationHubsNamespaces": "ntfns-",
              "notificationHubsNamespacesNotificationHubs": "ntf-",
              "operationalInsightsWorkspaces": "log",
              "operationalInsightsWorkspaces-prefix": "log-",
              "portalDashboards": "dash-",
              "powerBIDedicatedCapacities": "pbi-",
              "purviewAccounts": "pview-",
              "recoveryServicesVaults": "rsv",
              "recoveryServicesVaults-prefix": "rsv-",
              "resourcesResourceGroups": "rg",
              "resourcesResourceGroups-prefix": "rg_",
              "searchSearchServices": "srch",
              "searchSearchServices-prefix": "srch-",
              "serviceBusNamespaces": "sb",
              "serviceBusNamespaces-prefix": "sb-",
              "serviceBusNamespacesQueues": "sbq",
              "serviceBusNamespacesQueues-prefix": "sbq-",
              "serviceBusNamespacesTopics": "sbt",
              "serviceBusNamespacesTopics-prefix": "sbt-",
              "serviceEndPointPolicies": "se-",
              "serviceFabricClusters": "sf-",
              "signalRServiceSignalR": "sigr",
              "sqlManagedInstances": "sqlmi-",
              "sqlServers": "sql",
              "sqlServers-prefix": "sql-",
              "sqlServersDataWarehouse": "sqldw-",
              "sqlServersDatabases": "sqldb-",
              "sqlServersDatabasesStretch": "sqlstrdb-",
              "storageStorageContainer": "stc",
              "storageStorageAccounts": "st",
              "storageStorageAccountsVm": "stvm",
              "storSimpleManagers": "ssimp",
              "streamAnalyticsCluster": "asa-",
              "synapseWorkspaces": "syn",
              "synapseWorkspacesAnalyticsWorkspaces": "synw",
              "synapseWorkspacesSqlPoolsDedicated": "syndp",
              "synapseWorkspacesSqlPoolsSpark": "synsp",
              "timeSeriesInsightsEnvironments": "tsi-",
              "webServerFarms": "plan",
              "webServerFarms-prefix": "plan-",
              "webSitesAppService": "app",
              "webSitesAppService-prefix": "app-",
              "webSitesAppServiceEnvironment": "ase",
              "webSitesAppServiceEnvironment-prefix": "ase-",
              "webSitesFunctions": "func",
              "webSitesFunctions-prefix": "func-",
              "webStaticSites": "stapp",
              "webStaticSites-prefix": "stapp-"
            },
            "sanitizedEnvironment": "[toLower(parameters('environmentName'))]",
            "sanitizedAppNameWithDashes": "[replace(replace(toLower(parameters('applicationName')), ' ', ''), '_', '')]",
            "sanitizedAppName": "[replace(replace(replace(toLower(parameters('applicationName')), ' ', ''), '-', ''), '_', '')]",
            "resourceTokenWithDash": "[if(equals(parameters('resourceToken'), ''), '', format('-{0}', parameters('resourceToken')))]",
            "resourceTokenWithoutDash": "[if(equals(parameters('resourceToken'), ''), '', format('{0}', parameters('resourceToken')))]",
            "dashRegionDashInstance": "[if(equals(parameters('instance'), ''), '', toLower(format('-{0}-{1}', parameters('regionCode'), parameters('instance'))))]",
            "dashInstance": "[if(equals(parameters('instance'), ''), '', format('-{0}', parameters('instance')))]",
            "regionInstance": "[if(equals(parameters('instance'), ''), '', toLower(format('{0}{1}', parameters('regionCode'), parameters('instance'))))]",
            "resourceAbbreviations": "[variables('$fxv#0')]"
          },
          "resources": [],
          "outputs": {
            "webSiteName": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-{2}{3}', variables('resourceAbbreviations').webSitesAppService, variables('sanitizedAppNameWithDashes'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash')))]"
            },
            "webSiteAppServicePlanName": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-{2}{3}{4}', variables('resourceAbbreviations').webServerFarms, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashRegionDashInstance')))]"
            },
            "appInsightsName": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-{2}{3}{4}', variables('resourceAbbreviations').insightsComponents, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashRegionDashInstance')))]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-{2}{3}{4}', variables('resourceAbbreviations').operationalInsightsWorkspaces, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashRegionDashInstance')))]"
            },
            "cosmosName": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-{2}{3}{4}', variables('resourceAbbreviations').documentDBDatabaseAccounts, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashRegionDashInstance')))]"
            },
            "apimName": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-{2}{3}{4}', variables('resourceAbbreviations').apiManagementService, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashRegionDashInstance')))]"
            },
            "searchServiceName": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-{2}{3}{4}', variables('resourceAbbreviations').searchSearchServices, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashRegionDashInstance')))]"
            },
            "cogServiceName": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-{2}{3}{4}', variables('resourceAbbreviations').cognitiveServicesFoundry, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashRegionDashInstance')))]"
            },
            "documentIntelligenceName": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-{2}{3}{4}', variables('resourceAbbreviations').documentIntelligence, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashRegionDashInstance')))]"
            },
            "aiHubName": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-{2}{3}{4}', variables('resourceAbbreviations').cognitiveServicesAIHub, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashRegionDashInstance')))]"
            },
            "aiHubProjectName": {
              "type": "string",
              "value": "[take(toLower(format('{0}-{1}-{2}{3}{4}', variables('resourceAbbreviations').cognitiveServicesHubProject, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashInstance'))), 32)]"
            },
            "aiHubFoundryProjectName": {
              "type": "string",
              "value": "[take(toLower(format('{0}-{1}-{2}{3}{4}', variables('resourceAbbreviations').cognitiveServicesFoundryProject, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashInstance'))), 32)]"
            },
            "caManagedEnvName": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-{2}{3}{4}', variables('resourceAbbreviations').appManagedEnvironments, variables('sanitizedAppName'), variables('sanitizedEnvironment'), parameters('resourceToken'), variables('dashRegionDashInstance')))]"
            },
            "containerAppAPIName": {
              "type": "string",
              "value": "[take(toLower(format('{0}-api-{1}-{2}{3}{4}', variables('resourceAbbreviations').appContainerApps, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashInstance'))), 32)]"
            },
            "containerAppUIName": {
              "type": "string",
              "value": "[take(toLower(format('{0}-ui-{1}-{2}{3}{4}', variables('resourceAbbreviations').appContainerApps, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashInstance'))), 32)]"
            },
            "containerAppBatchName": {
              "type": "string",
              "value": "[take(toLower(format('{0}-batch-{1}-{2}{3}{4}', variables('resourceAbbreviations').appContainerApps, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashInstance'))), 32)]"
            },
            "caManagedIdentityName": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-{2}-{3}{4}', variables('resourceAbbreviations').managedIdentityUserAssignedIdentities, variables('sanitizedAppName'), variables('resourceAbbreviations').appManagedEnvironments, variables('sanitizedEnvironment'), variables('dashInstance')))]"
            },
            "kvManagedIdentityName": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-{2}-{3}{4}', variables('resourceAbbreviations').managedIdentityUserAssignedIdentities, variables('sanitizedAppName'), variables('resourceAbbreviations').keyVaultVaults, variables('sanitizedEnvironment'), variables('dashInstance')))]"
            },
            "userAssignedIdentityName": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-app-{2}{3}', variables('resourceAbbreviations').managedIdentityUserAssignedIdentities, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('dashInstance')))]"
            },
            "ACR_Name": {
              "type": "string",
              "value": "[take(format('{0}{1}{2}{3}{4}', variables('resourceAbbreviations').containerRegistryRegistries, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithoutDash'), variables('regionInstance')), 50)]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[take(format('{0}{1}{2}{3}{4}', variables('resourceAbbreviations').keyVaultVaults, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithoutDash'), variables('regionInstance')), 24)]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[take(format('{0}{1}{2}{3}{4}', variables('resourceAbbreviations').storageStorageAccounts, variables('sanitizedAppName'), variables('sanitizedEnvironment'), variables('resourceTokenWithoutDash'), variables('regionInstance')), 24)]"
            },
            "vnet_Name": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}-{2}{3}{4}', variables('sanitizedAppName'), variables('resourceAbbreviations').networkVirtualNetworks, variables('sanitizedEnvironment'), variables('resourceTokenWithDash'), variables('dashRegionDashInstance')))]"
            },
            "subnetAppGwName": {
              "type": "string",
              "value": "[toLower('snet-app-gateway')]"
            },
            "subnetAppSeName": {
              "type": "string",
              "value": "[toLower('snet-app-services')]"
            },
            "subnetPeName": {
              "type": "string",
              "value": "[toLower('snet-private-endpoint')]"
            },
            "subnetAgentName": {
              "type": "string",
              "value": "[toLower('snet-agent')]"
            },
            "subnetBastionName": {
              "type": "string",
              "value": "AzureBastionSubnet"
            },
            "subnetJumpboxName": {
              "type": "string",
              "value": "[toLower('snet-jumpbox')]"
            },
            "subnetTrainingName": {
              "type": "string",
              "value": "[toLower('snet-training')]"
            },
            "subnetScoringName": {
              "type": "string",
              "value": "[toLower('snet-scoring')]"
            },
            "vm_name": {
              "type": "string",
              "value": "[take(toLower(format('{0}-{1}{2}-{3}', variables('sanitizedAppName'), variables('resourceAbbreviations').computeVirtualMachines, variables('dashInstance'), variables('sanitizedEnvironment'))), 15)]"
            },
            "vm_nic_name": {
              "type": "string",
              "value": "[toLower(format('{0}{1}{2}-{3}', variables('sanitizedAppName'), variables('resourceAbbreviations').networkNetworkInterfaces, variables('dashInstance'), variables('sanitizedEnvironment')))]"
            },
            "vm_pip_name": {
              "type": "string",
              "value": "[toLower(format('{0}{1}{2}-{3}', variables('sanitizedAppName'), variables('resourceAbbreviations').networkPublicIPAddresses, variables('dashInstance'), variables('sanitizedEnvironment')))]"
            },
            "vm_os_disk_name": {
              "type": "string",
              "value": "[toLower(format('{0}-{1}{2}-{3}', variables('sanitizedAppName'), variables('resourceAbbreviations').computeDisks, variables('dashInstance'), variables('sanitizedEnvironment')))]"
            },
            "vm_nsg_name": {
              "type": "string",
              "value": "[toLower(format('{0}{1}{2}-{3}', variables('sanitizedAppName'), variables('resourceAbbreviations').networkNetworkSecurityGroups, variables('dashInstance'), variables('sanitizedEnvironment')))]"
            },
            "bastion_host_name": {
              "type": "string",
              "value": "[toLower(format('{0}{1}{2}-{3}', variables('sanitizedAppName'), variables('resourceAbbreviations').networkBastionHosts, variables('dashInstance'), variables('sanitizedEnvironment')))]"
            },
            "bastion_pip_name": {
              "type": "string",
              "value": "[toLower(format('{0}{1}{2}{3}-{4}', variables('sanitizedAppName'), variables('resourceAbbreviations').networkPublicIPAddresses, variables('resourceAbbreviations').bastionPip, variables('dashInstance'), variables('sanitizedEnvironment')))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('containerregistry{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "newRegistryName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.ACR_Name.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "acrSku": {
            "value": "Premium"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "publicAccessEnabled": {
            "value": "[parameters('publicAccessEnabled')]"
          },
          "privateEndpointName": {
            "value": ""
          },
          "privateEndpointSubnetId": {
            "value": ""
          },
          "myIpAddress": {
            "value": "[parameters('myIpAddress')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "4156937284762074758"
            }
          },
          "parameters": {
            "existingRegistryName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Provide an existing name of an Azure Container Registry if using pre-existing one"
              }
            },
            "existing_ACR_ResourceGroupName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Provide resource group name for an existing Azure Container Registry if using pre-existing one"
              }
            },
            "newRegistryName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Provide a globally unique name of your Azure Container Registry for a new server"
              }
            },
            "acrSku": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Provide a tier of your Azure Container Registry."
              }
            },
            "publicAccessEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Control public access to resources"
              }
            },
            "myIpAddress": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Provide the IP address to allow access to the Azure Container Registry"
              }
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateEndpointName": {
              "type": "string",
              "defaultValue": ""
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "registrySecretName": "acr-registry-secret",
            "useExistingResource": "[not(empty(parameters('existingRegistryName')))]",
            "resourceGroupName": "[resourceGroup().name]"
          },
          "resources": [
            {
              "condition": "[not(variables('useExistingResource'))]",
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-01-01-preview",
              "name": "[parameters('newRegistryName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('acrSku')]"
              },
              "properties": {
                "adminUserEnabled": true,
                "publicNetworkAccess": "Enabled",
                "networkRuleSet": {
                  "defaultAction": "[if(parameters('publicAccessEnabled'), 'Allow', 'Deny')]",
                  "ipRules": "[if(empty(parameters('myIpAddress')), createArray(), createArray(createObject('action', 'Allow', 'value', parameters('myIpAddress'))))]"
                }
              }
            },
            {
              "condition": "[and(not(variables('useExistingResource')), not(empty(parameters('privateEndpointSubnetId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-private-endpoint', parameters('newRegistryName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('privateEndpointName')]"
                  },
                  "groupIds": {
                    "value": [
                      "registry"
                    ]
                  },
                  "targetResourceId": {
                    "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('newRegistryName'))]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17553196814899236809"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to create"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The region where the private endpoint will be created"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the subnet where the private endpoint will be created"
                      }
                    },
                    "targetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the resource to which the private endpoint will be connected"
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "An array of group IDs of the service type that they private endpoint will be connect to"
                      }
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone for this resource"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The tags to associate with the private endpoint"
                      }
                    }
                  },
                  "variables": {
                    "nicName": "[format('{0}-nic', parameters('privateEndpointName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[variables('nicName')]",
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('targetResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('dnsZoneId'), ''))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-06-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}-dns-group', parameters('privateEndpointName')))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "default",
                            "properties": {
                              "privateDnsZoneId": "[parameters('dnsZoneId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "privateEndpointName": {
                      "type": "string",
                      "value": "[parameters('privateEndpointName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('newRegistryName'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(variables('useExistingResource'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existing_ACR_ResourceGroupName')), 'Microsoft.ContainerRegistry/registries', parameters('existingRegistryName')), resourceId('Microsoft.ContainerRegistry/registries', parameters('newRegistryName')))]"
            },
            "name": {
              "type": "string",
              "value": "[if(variables('useExistingResource'), parameters('existingRegistryName'), parameters('newRegistryName'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[if(variables('useExistingResource'), parameters('existing_ACR_ResourceGroupName'), variables('resourceGroupName'))]"
            },
            "loginServer": {
              "type": "string",
              "value": "[if(variables('useExistingResource'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existing_ACR_ResourceGroupName')), 'Microsoft.ContainerRegistry/registries', parameters('existingRegistryName')), '2023-01-01-preview').loginServer, reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('newRegistryName')), '2023-01-01-preview').loginServer)]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[parameters('privateEndpointName')]"
            },
            "registrySecretName": {
              "type": "string",
              "value": "[variables('registrySecretName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('law{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "newLogAnalyticsName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceName.value]"
          },
          "newApplicationInsightsName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.appInsightsName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "2035374341202497288"
            }
          },
          "parameters": {
            "newLogAnalyticsName": {
              "type": "string",
              "defaultValue": ""
            },
            "newApplicationInsightsName": {
              "type": "string",
              "defaultValue": ""
            },
            "existingLogAnalyticsName": {
              "type": "string",
              "defaultValue": ""
            },
            "existingLogAnalyticsRgName": {
              "type": "string",
              "defaultValue": ""
            },
            "existingApplicationInsightsName": {
              "type": "string",
              "defaultValue": ""
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "azureMonitorPrivateLinkScopeName": {
              "type": "string",
              "defaultValue": ""
            },
            "azureMonitorPrivateLinkScopeResourceGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateEndpointName": {
              "type": "string",
              "defaultValue": ""
            },
            "publicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled"
            },
            "publicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled"
            }
          },
          "variables": {
            "useExistingLogAnalytics": "[not(empty(parameters('existingLogAnalyticsName')))]",
            "useExistingAppInsights": "[not(empty(parameters('existingApplicationInsightsName')))]"
          },
          "resources": [
            {
              "condition": "[not(variables('useExistingLogAnalytics'))]",
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[parameters('newLogAnalyticsName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "retentionInDays": 30,
                "features": {
                  "searchVersion": 1
                },
                "sku": {
                  "name": "PerGB2018"
                },
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]"
              }
            },
            {
              "condition": "[not(variables('useExistingAppInsights'))]",
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('newApplicationInsightsName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('newLogAnalyticsName'))]",
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('newLogAnalyticsName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('privateEndpointSubnetId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "azure-monitor-private-link-scope-private-endpoint",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateEndpointName": {
                    "value": "[parameters('privateEndpointName')]"
                  },
                  "groupIds": {
                    "value": [
                      "azuremonitor"
                    ]
                  },
                  "targetResourceId": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('azureMonitorPrivateLinkScopeResourceGroupName')), 'microsoft.insights/privateLinkScopes', parameters('azureMonitorPrivateLinkScopeName'))]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17553196814899236809"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to create"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The region where the private endpoint will be created"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the subnet where the private endpoint will be created"
                      }
                    },
                    "targetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the resource to which the private endpoint will be connected"
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "An array of group IDs of the service type that they private endpoint will be connect to"
                      }
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone for this resource"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The tags to associate with the private endpoint"
                      }
                    }
                  },
                  "variables": {
                    "nicName": "[format('{0}-nic', parameters('privateEndpointName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[variables('nicName')]",
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('targetResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('dnsZoneId'), ''))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-06-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}-dns-group', parameters('privateEndpointName')))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "default",
                            "properties": {
                              "privateDnsZoneId": "[parameters('dnsZoneId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "privateEndpointName": {
                      "type": "string",
                      "value": "[parameters('privateEndpointName')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "applicationInsightsId": {
              "type": "string",
              "value": "[if(variables('useExistingAppInsights'), resourceId('Microsoft.Insights/components', parameters('existingApplicationInsightsName')), resourceId('Microsoft.Insights/components', parameters('newApplicationInsightsName')))]"
            },
            "applicationInsightsName": {
              "type": "string",
              "value": "[if(variables('useExistingAppInsights'), parameters('existingApplicationInsightsName'), parameters('newApplicationInsightsName'))]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[if(variables('useExistingLogAnalytics'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingLogAnalyticsRgName')), 'Microsoft.OperationalInsights/workspaces', parameters('existingLogAnalyticsName')), resourceId('Microsoft.OperationalInsights/workspaces', parameters('newLogAnalyticsName')))]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[if(variables('useExistingLogAnalytics'), parameters('existingLogAnalyticsName'), parameters('newLogAnalyticsName'))]"
            },
            "appInsightsConnectionString": {
              "type": "string",
              "value": "[if(variables('useExistingAppInsights'), reference(resourceId('Microsoft.Insights/components', parameters('existingApplicationInsightsName')), '2020-02-02').ConnectionString, reference(resourceId('Microsoft.Insights/components', parameters('newApplicationInsightsName')), '2020-02-02').ConnectionString)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('storage{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "myIpAddress": {
            "value": "[parameters('myIpAddress')]"
          },
          "containers": {
            "value": [
              "data",
              "batch-input",
              "batch-output"
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "16116031618697945172"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": ""
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "existingStorageAccountName": {
              "type": "string",
              "defaultValue": ""
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateEndpointBlobName": {
              "type": "string",
              "defaultValue": ""
            },
            "privateEndpointQueueName": {
              "type": "string",
              "defaultValue": ""
            },
            "privateEndpointTableName": {
              "type": "string",
              "defaultValue": ""
            },
            "myIpAddress": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Provide the IP address to allow access to the Azure Container Registry"
              }
            },
            "containers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "defaultValue": []
            },
            "resourcesWithAccess": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "defaultValue": []
            },
            "kind": {
              "type": "string",
              "defaultValue": "StorageV2"
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2"
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "Standard_LRS"
              }
            }
          },
          "variables": {
            "useExistingStorageAccount": "[not(empty(parameters('existingStorageAccountName')))]",
            "storageAccountConnectionStringSecretName": "storage-account-connection-string"
          },
          "resources": {
            "storage::blobServices::container": {
              "copy": {
                "name": "storage::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[and(not(variables('useExistingStorageAccount')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}/{2}', parameters('name'), 'default', parameters('containers')[copyIndex()])]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "storage::blobServices"
              ]
            },
            "storage::blobServices": {
              "condition": "[and(not(variables('useExistingStorageAccount')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "dependsOn": [
                "storage"
              ]
            },
            "existingStorageAccount": {
              "condition": "[variables('useExistingStorageAccount')]",
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('existingStorageAccountName')]"
            },
            "existingStorageAccountBlobServices": {
              "condition": "[and(variables('useExistingStorageAccount'), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('existingStorageAccountName'), 'default')]"
            },
            "storageAccountBlobContainerResource": {
              "copy": {
                "name": "storageAccountBlobContainerResource",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[variables('useExistingStorageAccount')]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}/{2}', parameters('existingStorageAccountName'), 'default', parameters('containers')[copyIndex()])]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "existingStorageAccountBlobServices"
              ]
            },
            "storage": {
              "condition": "[not(variables('useExistingStorageAccount'))]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "sku": "[parameters('sku')]",
              "properties": {
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "allowBlobPublicAccess": false,
                "publicNetworkAccess": "[if(parameters('publicNetworkAccess'), 'Enabled', 'Disabled')]",
                "supportsHttpsTrafficOnly": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "resourceAccessRules": "[parameters('resourcesWithAccess')]",
                  "defaultAction": "Deny",
                  "ipRules": "[if(empty(parameters('myIpAddress')), createArray(), createArray(createObject('value', parameters('myIpAddress'))))]"
                }
              }
            },
            "privateEndpointBlob": {
              "condition": "[and(not(variables('useExistingStorageAccount')), not(empty(parameters('privateEndpointSubnetId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-blob-private-endpoint', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('privateEndpointBlobName')]"
                  },
                  "groupIds": {
                    "value": [
                      "blob"
                    ]
                  },
                  "targetResourceId": {
                    "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17553196814899236809"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to create"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The region where the private endpoint will be created"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the subnet where the private endpoint will be created"
                      }
                    },
                    "targetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the resource to which the private endpoint will be connected"
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "An array of group IDs of the service type that they private endpoint will be connect to"
                      }
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone for this resource"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The tags to associate with the private endpoint"
                      }
                    }
                  },
                  "variables": {
                    "nicName": "[format('{0}-nic', parameters('privateEndpointName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[variables('nicName')]",
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('targetResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('dnsZoneId'), ''))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-06-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}-dns-group', parameters('privateEndpointName')))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "default",
                            "properties": {
                              "privateDnsZoneId": "[parameters('dnsZoneId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "privateEndpointName": {
                      "type": "string",
                      "value": "[parameters('privateEndpointName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storage"
              ]
            },
            "privateEndpointTable": {
              "condition": "[and(not(variables('useExistingStorageAccount')), not(empty(parameters('privateEndpointSubnetId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-table-private-endpoint', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('privateEndpointTableName')]"
                  },
                  "groupIds": {
                    "value": [
                      "table"
                    ]
                  },
                  "targetResourceId": {
                    "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17553196814899236809"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to create"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The region where the private endpoint will be created"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the subnet where the private endpoint will be created"
                      }
                    },
                    "targetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the resource to which the private endpoint will be connected"
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "An array of group IDs of the service type that they private endpoint will be connect to"
                      }
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone for this resource"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The tags to associate with the private endpoint"
                      }
                    }
                  },
                  "variables": {
                    "nicName": "[format('{0}-nic', parameters('privateEndpointName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[variables('nicName')]",
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('targetResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('dnsZoneId'), ''))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-06-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}-dns-group', parameters('privateEndpointName')))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "default",
                            "properties": {
                              "privateDnsZoneId": "[parameters('dnsZoneId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "privateEndpointName": {
                      "type": "string",
                      "value": "[parameters('privateEndpointName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storage"
              ]
            },
            "privateEndpointQueue": {
              "condition": "[and(not(variables('useExistingStorageAccount')), not(empty(parameters('privateEndpointSubnetId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-queue-private-endpoint', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('privateEndpointQueueName')]"
                  },
                  "groupIds": {
                    "value": [
                      "queue"
                    ]
                  },
                  "targetResourceId": {
                    "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17553196814899236809"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to create"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The region where the private endpoint will be created"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the subnet where the private endpoint will be created"
                      }
                    },
                    "targetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the resource to which the private endpoint will be connected"
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "An array of group IDs of the service type that they private endpoint will be connect to"
                      }
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone for this resource"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The tags to associate with the private endpoint"
                      }
                    }
                  },
                  "variables": {
                    "nicName": "[format('{0}-nic', parameters('privateEndpointName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[variables('nicName')]",
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('targetResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('dnsZoneId'), ''))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-06-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}-dns-group', parameters('privateEndpointName')))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "default",
                            "properties": {
                              "privateDnsZoneId": "[parameters('dnsZoneId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "privateEndpointName": {
                      "type": "string",
                      "value": "[parameters('privateEndpointName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storage"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "value": "[if(variables('useExistingStorageAccount'), parameters('existingStorageAccountName'), parameters('name'))]"
            },
            "id": {
              "type": "string",
              "value": "[if(variables('useExistingStorageAccount'), resourceId('Microsoft.Storage/storageAccounts', parameters('existingStorageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('name')))]"
            },
            "primaryEndpoints": {
              "type": "object",
              "value": "[if(variables('useExistingStorageAccount'), reference('existingStorageAccount').primaryEndpoints, reference('storage').primaryEndpoints)]"
            },
            "containerNames": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('containers'))]",
                "input": "[if(variables('useExistingStorageAccount'), null(), createObject('name', parameters('containers')[copyIndex()], 'url', if(variables('useExistingStorageAccount'), format('{0}/{1}', reference('existingStorageAccount').primaryEndpoints.blob, parameters('containers')[copyIndex()]), format('{0}/{1}', reference('storage').primaryEndpoints.blob, parameters('containers')[copyIndex()]))))]"
              }
            },
            "privateEndpointBlobName": {
              "type": "string",
              "value": "[parameters('privateEndpointBlobName')]"
            },
            "privateEndpointTableName": {
              "type": "string",
              "value": "[parameters('privateEndpointTableName')]"
            },
            "privateEndpointQueueName": {
              "type": "string",
              "value": "[parameters('privateEndpointQueueName')]"
            },
            "storageAccountConnectionStringSecretName": {
              "type": "string",
              "value": "[variables('storageAccountConnectionStringSecretName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('app-identity{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "identityName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.userAssignedIdentityName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "4446871143229101616"
            }
          },
          "parameters": {
            "identityName": {
              "type": "string",
              "defaultValue": ""
            },
            "existingIdentityName": {
              "type": "string",
              "defaultValue": ""
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "useExistingIdentity": "[not(empty(parameters('existingIdentityName')))]"
          },
          "resources": [
            {
              "condition": "[not(variables('useExistingIdentity'))]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-07-31-preview",
              "name": "[parameters('identityName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "managedIdentityId": {
              "type": "string",
              "value": "[if(variables('useExistingIdentity'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('existingIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')))]"
            },
            "managedIdentityName": {
              "type": "string",
              "value": "[if(variables('useExistingIdentity'), parameters('existingIdentityName'), parameters('identityName'))]"
            },
            "managedIdentityClientId": {
              "type": "string",
              "value": "[if(variables('useExistingIdentity'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('existingIdentityName')), '2023-07-31-preview').clientId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-07-31-preview').clientId)]"
            },
            "managedIdentityPrincipalId": {
              "type": "string",
              "value": "[if(variables('useExistingIdentity'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('existingIdentityName')), '2023-07-31-preview').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-07-31-preview').principalId)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('addRoleAssignments')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('identity-roles{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "identityPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.managedIdentityPrincipalId.value]"
          },
          "principalType": {
            "value": "ServicePrincipal"
          },
          "registryName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerregistry{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "aiSearchName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "aiServicesName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "cosmosName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7244741543290095711"
            }
          },
          "parameters": {
            "identityPrincipalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "ServicePrincipal",
                "User"
              ]
            },
            "registryName": {
              "type": "string",
              "defaultValue": ""
            },
            "storageAccountName": {
              "type": "string",
              "defaultValue": ""
            },
            "aiSearchName": {
              "type": "string",
              "defaultValue": ""
            },
            "aiServicesName": {
              "type": "string",
              "defaultValue": ""
            },
            "cosmosName": {
              "type": "string",
              "defaultValue": ""
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": ""
            },
            "apimName": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "$fxv#0": {
              "source": {
                "url": "https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles"
              },
              "cosmos": {
                "dataContributorRoleId": "00000000-0000-0000-0000-000000000002"
              },
              "storage": {
                "blobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                "blobDataOwnerRoleId": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                "storageAccountContributorRoleId": "17d1049b-9a84-46fb-8f53-869881c3d3ab",
                "queueDataContributorRoleId": "974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                "tableContributorRoleId": "0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                "storageQueueDataMessageSender": "c6a89b2d-59bc-44d0-9896-0f6e12d7b80a"
              },
              "search": {
                "indexDataContributorRoleId": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                "indexDataReaderRoleId": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
                "serviceContributorRoleId": "7ca78c08-252a-4471-8644-bb5ff32d4ba0"
              },
              "openai": {
                "cognitiveServicesOpenAIContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
                "cognitiveServicesOpenAIUserRoleId": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd",
                "cognitiveServicesUserRoleId": "a97b65f3-24c7-4388-baec-2e87135dc908",
                "cognitiveServicesContributorRoleId": "25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                "cognitiveServicesAzureAIEngineerRoleId": "64702f94-c441-49e6-a78b-ef80e0188fee"
              },
              "ml": {
                "dataScientistRole": "f6c7c914-8db3-469d-8ca1-694a8f32e121"
              },
              "containerregistry": {
                "acrPullRoleId": "7f951dda-4ed3-4680-a7ca-43fe172d538d"
              },
              "keyvault": {
                "secretsUserRoleId": "4633458b-17de-408a-b874-0445c86b69e6",
                "secretsOfficerRoleId": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7"
              },
              "apim": {
                "serviceReaderRoleId": "71522526-b88f-4d52-b57f-d31fc3546d0d"
              }
            },
            "roleDefinitions": "[variables('$fxv#0')]",
            "addRegistryRoles": "[not(empty(parameters('registryName')))]",
            "addStorageRoles": "[not(empty(parameters('storageAccountName')))]",
            "addSearchRoles": "[not(empty(parameters('aiSearchName')))]",
            "addCogServicesRoles": "[not(empty(parameters('aiServicesName')))]",
            "addCosmosRoles": "[not(empty(parameters('cosmosName')))]",
            "addKeyVaultRoles": "[not(empty(parameters('keyVaultName')))]",
            "addApimRoles": "[not(empty(parameters('apimName')))]"
          },
          "resources": [
            {
              "condition": "[variables('addRegistryRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('registryName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), parameters('identityPrincipalId'), variables('roleDefinitions').containerregistry.acrPullRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').containerregistry.acrPullRoleId)]",
                "description": "[format('Permission for {0} {1} to pull images from the registry {2}', parameters('principalType'), parameters('identityPrincipalId'), parameters('registryName'))]"
              }
            },
            {
              "condition": "[variables('addStorageRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.blobDataContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').storage.blobDataContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to write to the storage account {2} Blob', parameters('principalType'), parameters('identityPrincipalId'), parameters('storageAccountName'))]"
              }
            },
            {
              "condition": "[variables('addStorageRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.tableContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').storage.tableContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to write to the storage account {2} Table', parameters('principalType'), parameters('identityPrincipalId'), parameters('storageAccountName'))]"
              }
            },
            {
              "condition": "[variables('addStorageRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.queueDataContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').storage.queueDataContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to write to the storage account {2} Queue', parameters('principalType'), parameters('identityPrincipalId'), parameters('storageAccountName'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIUserRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesOpenAIUserRoleId)]",
                "description": "[format('Permission for {0} {1} to be OpenAI User', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesOpenAIContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to be OpenAI Contributor', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesUserRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesUserRoleId)]",
                "description": "[format('Permission for {0} {1} to be a Cognitive Services User', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to be a Cognitive Services Contributor', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesAzureAIEngineerRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesAzureAIEngineerRoleId)]",
                "description": "[format('Permission for {0} {1} to be a Cognitive Services Azure AI Engineer', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addSearchRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').search.indexDataContributorRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to use the modify search service indexes', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addSearchRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataReaderRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').search.indexDataReaderRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to use the read search service indexes', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addSearchRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.serviceContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').search.serviceContributorRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to be a search service contributor', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCosmosRoles')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2024-08-15",
              "name": "[format('{0}/{1}', parameters('cosmosName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), parameters('identityPrincipalId'), variables('roleDefinitions').cosmos.dataContributorRoleId))]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[format('{0}/providers/Microsoft.DocumentDB/databaseAccounts/{1}/sqlRoleDefinitions/{2}', resourceGroup().id, parameters('cosmosName'), variables('roleDefinitions').cosmos.dataContributorRoleId)]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName'))]"
              }
            },
            {
              "condition": "[variables('addKeyVaultRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('identityPrincipalId'), variables('roleDefinitions').keyvault.secretsOfficerRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').keyvault.secretsOfficerRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to be a Key Vault Secrets Officer', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addApimRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ApiManagement/service/{0}', parameters('apimName'))]",
              "name": "[guid(resourceId('Microsoft.ApiManagement/service', parameters('apimName')), parameters('identityPrincipalId'), variables('roleDefinitions').apim.serviceReaderRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').apim.serviceReaderRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to be a APIM Service Reader', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            }
          ],
          "outputs": {
            "containerRegistryRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addRegistryRoles'), createObject('registry_AcrPull_RoleId', extensionResourceId(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), parameters('identityPrincipalId'), variables('roleDefinitions').containerregistry.acrPullRoleId))), createObject())]"
            },
            "storageRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addStorageRoles'), createObject('storage_BlobContributor_RoleId', extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.blobDataContributorRoleId)), 'storage_TableContributor_RoleId', extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.tableContributorRoleId)), 'storage_QueueContributor_RoleId', extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.queueDataContributorRoleId))), createObject())]"
            },
            "cognitiveServicesRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addCogServicesRoles'), createObject('cognitiveServices_OpenAIUser_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIUserRoleId)), 'cognitiveServices_OpenAIContributor_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIContributorRoleId)), 'cognitiveServices_User_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesUserRoleId)), 'cognitiveServices_Contributor_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesContributorRoleId)), 'cognitiveServices_AzureAIEngineer_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesAzureAIEngineerRoleId))), createObject())]"
            },
            "searchServiceRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addSearchRoles'), createObject('search_IndexDataContributor_RoleId', extensionResourceId(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataContributorRoleId)), 'search_IndexDataReader_RoleId', extensionResourceId(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataReaderRoleId)), 'search_ServiceContributor_RoleId', extensionResourceId(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.serviceContributorRoleId))), createObject())]"
            },
            "cosmosRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addCosmosRoles'), createObject('cosmos_UserAccess_RoleId', resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments', parameters('cosmosName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), parameters('identityPrincipalId'), variables('roleDefinitions').cosmos.dataContributorRoleId))), createObject())]"
            },
            "keyVaultRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addKeyVaultRoles'), createObject('keyVault_SecretsOfficer_RoleId', extensionResourceId(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('identityPrincipalId'), variables('roleDefinitions').keyvault.secretsOfficerRoleId))), createObject())]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('containerregistry{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "condition": "[and(parameters('addRoleAssignments'), not(empty(parameters('principalId'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('user-roles{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "identityPrincipalId": {
            "value": "[parameters('principalId')]"
          },
          "principalType": {
            "value": "User"
          },
          "registryName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerregistry{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "aiSearchName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "aiServicesName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "cosmosName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7244741543290095711"
            }
          },
          "parameters": {
            "identityPrincipalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "ServicePrincipal",
                "User"
              ]
            },
            "registryName": {
              "type": "string",
              "defaultValue": ""
            },
            "storageAccountName": {
              "type": "string",
              "defaultValue": ""
            },
            "aiSearchName": {
              "type": "string",
              "defaultValue": ""
            },
            "aiServicesName": {
              "type": "string",
              "defaultValue": ""
            },
            "cosmosName": {
              "type": "string",
              "defaultValue": ""
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": ""
            },
            "apimName": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "$fxv#0": {
              "source": {
                "url": "https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles"
              },
              "cosmos": {
                "dataContributorRoleId": "00000000-0000-0000-0000-000000000002"
              },
              "storage": {
                "blobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                "blobDataOwnerRoleId": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                "storageAccountContributorRoleId": "17d1049b-9a84-46fb-8f53-869881c3d3ab",
                "queueDataContributorRoleId": "974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                "tableContributorRoleId": "0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                "storageQueueDataMessageSender": "c6a89b2d-59bc-44d0-9896-0f6e12d7b80a"
              },
              "search": {
                "indexDataContributorRoleId": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                "indexDataReaderRoleId": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
                "serviceContributorRoleId": "7ca78c08-252a-4471-8644-bb5ff32d4ba0"
              },
              "openai": {
                "cognitiveServicesOpenAIContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
                "cognitiveServicesOpenAIUserRoleId": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd",
                "cognitiveServicesUserRoleId": "a97b65f3-24c7-4388-baec-2e87135dc908",
                "cognitiveServicesContributorRoleId": "25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                "cognitiveServicesAzureAIEngineerRoleId": "64702f94-c441-49e6-a78b-ef80e0188fee"
              },
              "ml": {
                "dataScientistRole": "f6c7c914-8db3-469d-8ca1-694a8f32e121"
              },
              "containerregistry": {
                "acrPullRoleId": "7f951dda-4ed3-4680-a7ca-43fe172d538d"
              },
              "keyvault": {
                "secretsUserRoleId": "4633458b-17de-408a-b874-0445c86b69e6",
                "secretsOfficerRoleId": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7"
              },
              "apim": {
                "serviceReaderRoleId": "71522526-b88f-4d52-b57f-d31fc3546d0d"
              }
            },
            "roleDefinitions": "[variables('$fxv#0')]",
            "addRegistryRoles": "[not(empty(parameters('registryName')))]",
            "addStorageRoles": "[not(empty(parameters('storageAccountName')))]",
            "addSearchRoles": "[not(empty(parameters('aiSearchName')))]",
            "addCogServicesRoles": "[not(empty(parameters('aiServicesName')))]",
            "addCosmosRoles": "[not(empty(parameters('cosmosName')))]",
            "addKeyVaultRoles": "[not(empty(parameters('keyVaultName')))]",
            "addApimRoles": "[not(empty(parameters('apimName')))]"
          },
          "resources": [
            {
              "condition": "[variables('addRegistryRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('registryName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), parameters('identityPrincipalId'), variables('roleDefinitions').containerregistry.acrPullRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').containerregistry.acrPullRoleId)]",
                "description": "[format('Permission for {0} {1} to pull images from the registry {2}', parameters('principalType'), parameters('identityPrincipalId'), parameters('registryName'))]"
              }
            },
            {
              "condition": "[variables('addStorageRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.blobDataContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').storage.blobDataContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to write to the storage account {2} Blob', parameters('principalType'), parameters('identityPrincipalId'), parameters('storageAccountName'))]"
              }
            },
            {
              "condition": "[variables('addStorageRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.tableContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').storage.tableContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to write to the storage account {2} Table', parameters('principalType'), parameters('identityPrincipalId'), parameters('storageAccountName'))]"
              }
            },
            {
              "condition": "[variables('addStorageRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.queueDataContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').storage.queueDataContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to write to the storage account {2} Queue', parameters('principalType'), parameters('identityPrincipalId'), parameters('storageAccountName'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIUserRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesOpenAIUserRoleId)]",
                "description": "[format('Permission for {0} {1} to be OpenAI User', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesOpenAIContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to be OpenAI Contributor', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesUserRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesUserRoleId)]",
                "description": "[format('Permission for {0} {1} to be a Cognitive Services User', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to be a Cognitive Services Contributor', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesAzureAIEngineerRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesAzureAIEngineerRoleId)]",
                "description": "[format('Permission for {0} {1} to be a Cognitive Services Azure AI Engineer', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addSearchRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').search.indexDataContributorRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to use the modify search service indexes', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addSearchRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataReaderRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').search.indexDataReaderRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to use the read search service indexes', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addSearchRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.serviceContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').search.serviceContributorRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to be a search service contributor', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCosmosRoles')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2024-08-15",
              "name": "[format('{0}/{1}', parameters('cosmosName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), parameters('identityPrincipalId'), variables('roleDefinitions').cosmos.dataContributorRoleId))]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[format('{0}/providers/Microsoft.DocumentDB/databaseAccounts/{1}/sqlRoleDefinitions/{2}', resourceGroup().id, parameters('cosmosName'), variables('roleDefinitions').cosmos.dataContributorRoleId)]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName'))]"
              }
            },
            {
              "condition": "[variables('addKeyVaultRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('identityPrincipalId'), variables('roleDefinitions').keyvault.secretsOfficerRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').keyvault.secretsOfficerRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to be a Key Vault Secrets Officer', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addApimRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ApiManagement/service/{0}', parameters('apimName'))]",
              "name": "[guid(resourceId('Microsoft.ApiManagement/service', parameters('apimName')), parameters('identityPrincipalId'), variables('roleDefinitions').apim.serviceReaderRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').apim.serviceReaderRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to be a APIM Service Reader', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            }
          ],
          "outputs": {
            "containerRegistryRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addRegistryRoles'), createObject('registry_AcrPull_RoleId', extensionResourceId(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), parameters('identityPrincipalId'), variables('roleDefinitions').containerregistry.acrPullRoleId))), createObject())]"
            },
            "storageRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addStorageRoles'), createObject('storage_BlobContributor_RoleId', extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.blobDataContributorRoleId)), 'storage_TableContributor_RoleId', extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.tableContributorRoleId)), 'storage_QueueContributor_RoleId', extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.queueDataContributorRoleId))), createObject())]"
            },
            "cognitiveServicesRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addCogServicesRoles'), createObject('cognitiveServices_OpenAIUser_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIUserRoleId)), 'cognitiveServices_OpenAIContributor_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIContributorRoleId)), 'cognitiveServices_User_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesUserRoleId)), 'cognitiveServices_Contributor_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesContributorRoleId)), 'cognitiveServices_AzureAIEngineer_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesAzureAIEngineerRoleId))), createObject())]"
            },
            "searchServiceRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addSearchRoles'), createObject('search_IndexDataContributor_RoleId', extensionResourceId(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataContributorRoleId)), 'search_IndexDataReader_RoleId', extensionResourceId(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataReaderRoleId)), 'search_ServiceContributor_RoleId', extensionResourceId(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.serviceContributorRoleId))), createObject())]"
            },
            "cosmosRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addCosmosRoles'), createObject('cosmos_UserAccess_RoleId', resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments', parameters('cosmosName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), parameters('identityPrincipalId'), variables('roleDefinitions').cosmos.dataContributorRoleId))), createObject())]"
            },
            "keyVaultRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addKeyVaultRoles'), createObject('keyVault_SecretsOfficer_RoleId', extensionResourceId(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('identityPrincipalId'), variables('roleDefinitions').keyvault.secretsOfficerRoleId))), createObject())]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('containerregistry{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('keyvault{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "commonTags": {
            "value": "[variables('tags')]"
          },
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
          },
          "keyVaultOwnerUserId": {
            "value": "[parameters('principalId')]"
          },
          "adminUserObjectIds": {
            "value": [
              "[reference(resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.managedIdentityPrincipalId.value]"
            ]
          },
          "publicNetworkAccess": "[if(parameters('publicAccessEnabled'), createObject('value', 'Enabled'), createObject('value', 'Disabled'))]",
          "keyVaultOwnerIpAddress": {
            "value": "[parameters('myIpAddress')]"
          },
          "createUserAssignedIdentity": {
            "value": false
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "14066528399709642309"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "defaultValue": ""
            },
            "existingKeyVaultName": {
              "type": "string",
              "defaultValue": ""
            },
            "existingKeyVaultResourceGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "commonTags": {
              "type": "object",
              "defaultValue": {}
            },
            "adminUserObjectIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Administrators that should have access to administer key vault"
              }
            },
            "applicationUserObjectIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Application that should have access to read key vault secrets"
              }
            },
            "keyVaultOwnerUserId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Administrator UserId that should have access to administer key vault"
              }
            },
            "keyVaultOwnerIpAddress": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Ip Address of the KV owner so they can read the vault, such as 254.254.254.254/32"
              }
            },
            "enabledForDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Determines if Azure can deploy certificates from this Key Vault."
              }
            },
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Determines if templates can reference secrets from this Key Vault."
              }
            },
            "enabledForDiskEncryption": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Determines if this Key Vault can be used for Azure Disk Encryption."
              }
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Determine if soft delete is enabled on this Key Vault."
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Determine if purge protection is enabled on this Key Vault."
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "The number of days to retain soft deleted vaults and vault objects."
              }
            },
            "useRBAC": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Determines if access to the objects granted using RBAC. When true, access policies are ignored."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ]
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateEndpointName": {
              "type": "string",
              "defaultValue": ""
            },
            "createUserAssignedIdentity": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Create a user assigned identity that can be used to verify and update secrets in future steps"
              }
            },
            "userAssignedIdentityName": {
              "type": "string",
              "defaultValue": "[format('{0}-cicd', parameters('keyVaultName'))]",
              "metadata": {
                "description": "Override the default user assigned identity user name if you need to"
              }
            },
            "createDaprIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Create a user assigned identity that DAPR can use to read secrets"
              }
            },
            "daprIdentityName": {
              "type": "string",
              "defaultValue": "[format('{0}-dapr', parameters('keyVaultName'))]",
              "metadata": {
                "description": "Override the default DAPR identity user name if you need to"
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "strongType": "Microsoft.OperationalInsights/workspaces",
                "example": "/subscriptions/<subscription_id>/resourceGroups/<resource_group>/providers/Microsoft.OperationalInsights/workspaces/<workspace_name>",
                "description": "The workspace to store audit logs."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "adminAccessPolicies",
                "count": "[length(parameters('adminUserObjectIds'))]",
                "input": {
                  "objectId": "[parameters('adminUserObjectIds')[copyIndex('adminAccessPolicies')]]",
                  "tenantId": "[variables('subTenantId')]",
                  "permissions": {
                    "certificates": [
                      "all"
                    ],
                    "secrets": [
                      "all"
                    ],
                    "keys": [
                      "all"
                    ]
                  }
                }
              },
              {
                "name": "applicationUserPolicies",
                "count": "[length(parameters('applicationUserObjectIds'))]",
                "input": {
                  "objectId": "[parameters('applicationUserObjectIds')[copyIndex('applicationUserPolicies')]]",
                  "tenantId": "[variables('subTenantId')]",
                  "permissions": {
                    "secrets": [
                      "get"
                    ],
                    "keys": [
                      "get",
                      "wrapKey",
                      "unwrapKey"
                    ]
                  }
                }
              }
            ],
            "useExistingVault": "[not(empty(parameters('existingKeyVaultName')))]",
            "templateTag": {
              "TemplateFile": "~keyvault.bicep"
            },
            "tags": "[union(parameters('commonTags'), variables('templateTag'))]",
            "skuName": "standard",
            "subTenantId": "[subscription().tenantId]",
            "ownerAccessPolicy": "[if(equals(parameters('keyVaultOwnerUserId'), ''), createArray(), createArray(createObject('objectId', parameters('keyVaultOwnerUserId'), 'tenantId', variables('subTenantId'), 'permissions', createObject('certificates', createArray('all'), 'secrets', createArray('all'), 'keys', createArray('all')))))]",
            "accessPolicies": "[union(variables('ownerAccessPolicy'), variables('adminAccessPolicies'), variables('applicationUserPolicies'))]",
            "kvIpRules": "[if(equals(parameters('keyVaultOwnerIpAddress'), ''), createArray(), createArray(createObject('value', parameters('keyVaultOwnerIpAddress'))))]"
          },
          "resources": [
            {
              "condition": "[not(variables('useExistingVault'))]",
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-11-01-preview",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[variables('tags')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "[variables('skuName')]"
                },
                "tenantId": "[variables('subTenantId')]",
                "enableRbacAuthorization": "[parameters('useRBAC')]",
                "accessPolicies": "[if(parameters('useRBAC'), createArray(), variables('accessPolicies'))]",
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
                "createMode": "default",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "networkAcls": {
                  "defaultAction": "[if(equals(parameters('publicNetworkAccess'), 'Enabled'), 'Allow', 'Deny')]",
                  "bypass": "AzureServices",
                  "ipRules": "[variables('kvIpRules')]",
                  "virtualNetworkRules": []
                }
              }
            },
            {
              "condition": "[and(not(variables('useExistingVault')), parameters('createUserAssignedIdentity'))]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2022-01-31-preview",
              "name": "[parameters('userAssignedIdentityName')]",
              "location": "[parameters('location')]"
            },
            {
              "condition": "[and(not(variables('useExistingVault')), parameters('createDaprIdentity'))]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2022-01-31-preview",
              "name": "[parameters('daprIdentityName')]",
              "location": "[parameters('location')]"
            },
            {
              "condition": "[and(not(variables('useExistingVault')), or(parameters('createUserAssignedIdentity'), parameters('createDaprIdentity')))]",
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
              "properties": {
                "accessPolicies": "[union(if(not(parameters('createUserAssignedIdentity')), createArray(), createArray(createObject('tenantId', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2022-01-31-preview').tenantId, 'objectId', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2022-01-31-preview').principalId, 'permissions', createObject('secrets', createArray('get', 'list', 'set'))))), if(not(parameters('createDaprIdentity')), createArray(), createArray(createObject('tenantId', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('daprIdentityName')), '2022-01-31-preview').tenantId, 'objectId', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('daprIdentityName')), '2022-01-31-preview').principalId, 'permissions', createObject('secrets', createArray('get', 'list'))))))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('daprIdentityName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
              ]
            },
            {
              "condition": "[and(not(variables('useExistingVault')), not(equals(parameters('workspaceId'), '')))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[format('{0}-auditlogs', parameters('keyVaultName'))]",
              "properties": {
                "workspaceId": "[parameters('workspaceId')]",
                "logs": [
                  {
                    "category": "AuditEvent",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "condition": "[and(not(variables('useExistingVault')), not(equals(parameters('workspaceId'), '')))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[format('{0}-metrics', parameters('keyVaultName'))]",
              "properties": {
                "workspaceId": "[parameters('workspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "condition": "[and(not(variables('useExistingVault')), not(empty(parameters('privateEndpointSubnetId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-private-endpoint', parameters('keyVaultName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('privateEndpointName')]"
                  },
                  "groupIds": {
                    "value": [
                      "vault"
                    ]
                  },
                  "targetResourceId": {
                    "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17553196814899236809"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to create"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The region where the private endpoint will be created"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the subnet where the private endpoint will be created"
                      }
                    },
                    "targetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the resource to which the private endpoint will be connected"
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "An array of group IDs of the service type that they private endpoint will be connect to"
                      }
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone for this resource"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The tags to associate with the private endpoint"
                      }
                    }
                  },
                  "variables": {
                    "nicName": "[format('{0}-nic', parameters('privateEndpointName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[variables('nicName')]",
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('targetResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('dnsZoneId'), ''))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-06-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}-dns-group', parameters('privateEndpointName')))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "default",
                            "properties": {
                              "privateDnsZoneId": "[parameters('dnsZoneId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "privateEndpointName": {
                      "type": "string",
                      "value": "[parameters('privateEndpointName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[if(variables('useExistingVault'), parameters('existingKeyVaultName'), parameters('keyVaultName'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[if(variables('useExistingVault'), parameters('existingKeyVaultResourceGroupName'), resourceGroup().name)]"
            },
            "id": {
              "type": "string",
              "value": "[if(variables('useExistingVault'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingKeyVaultResourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('existingKeyVaultName')), resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')))]"
            },
            "userManagedIdentityId": {
              "type": "string",
              "value": "[if(variables('useExistingVault'), '', if(parameters('createUserAssignedIdentity'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), ''))]"
            },
            "endpoint": {
              "type": "string",
              "value": "[if(variables('useExistingVault'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingKeyVaultResourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('existingKeyVaultName')), '2021-11-01-preview').vaultUri, reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2021-11-01-preview').vaultUri)]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[if(variables('useExistingVault'), '', parameters('privateEndpointName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "condition": "[variables('deduplicateKVSecrets')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('keyVault-Secret-List-Names{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyvault{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "userManagedIdentityId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.managedIdentityId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "9778166951336157644"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "defaultValue": "myKeyVault"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "utcValue": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "userManagedIdentityId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "getKeyVaultSecretNameList",
              "location": "[parameters('location')]",
              "kind": "AzurePowerShell",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('userManagedIdentityId'))]": {}
                }
              },
              "properties": {
                "azPowerShellVersion": "8.1",
                "forceUpdateTag": "[parameters('utcValue')]",
                "retentionInterval": "PT1H",
                "timeout": "PT5M",
                "cleanupPreference": "Always",
                "arguments": "[format(' -KeyVaultName {0}', parameters('keyVaultName'))]",
                "scriptContent": "      Param ([string] $KeyVaultName)\r\n      $startDate = Get-Date\r\n      $startTime = [System.Diagnostics.Stopwatch]::StartNew()\r\n      $message = \"\"\r\n      $message = \"Getting names of secrets in vault: $($KeyVaultName)...\"\r\n      $secretList = Get-AzKeyVaultSecret -VaultName $KeyVaultName | Select Name\r\n      $secretListFull = \";\" + ((-split $secretList) -join \";\") + \";\"\r\n      $secretListString = $secretListFull.replace(\"@{Name=\", \"\").replace(\"}\", \"\")\r\n      $endDate = Get-Date\r\n      $endTime = $startTime.Elapsed;\r\n      $elapsedTime = \"Script Elapsed Time: {0:HH:mm:ss}\" -f ([datetime]$endTime.Ticks)\r\n      $elapsedTime += \"; Start: {0:HH:mm:ss}\" -f ([datetime]$startDate)\r\n      $elapsedTime += \"; End: {0:HH:mm:ss}\" -f ([datetime]$endDate)\r\n      Write-Output $message\r\n      Write-Output $secretListString\r\n      Write-Output $elapsedTime\r\n      $DeploymentScriptOutputs = @{}\r\n      $DeploymentScriptOutputs['message'] = $message\r\n      $DeploymentScriptOutputs['secretList'] = $secretListString\r\n      $DeploymentScriptOutputs['elapsed'] = $elapsedTime\r\n      "
              }
            }
          ],
          "outputs": {
            "message": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'getKeyVaultSecretNameList'), '2023-08-01').outputs.message]"
            },
            "secretNameList": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'getKeyVaultSecretNameList'), '2023-08-01').outputs.secretList]"
            },
            "elapsed": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'getKeyVaultSecretNameList'), '2023-08-01').outputs.elapsed]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('keyvault{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('secret-api-key{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyvault{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "secretName": {
            "value": "api-key"
          },
          "existingSecretNames": "[if(variables('deduplicateKVSecrets'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', format('keyVault-Secret-List-Names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretNameList.value), createObject('value', ''))]",
          "secretValue": {
            "value": "[variables('apiKeyValue')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "1663694699331710985"
            },
            "description": "Creates or updates a secret in an Azure Key Vault."
          },
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "secretName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "contentType": {
              "type": "string",
              "defaultValue": "string"
            },
            "secretValue": {
              "type": "securestring",
              "metadata": {
                "description": "The value of the secret. Provide only derived values like blob storage access, but do not hard code any secrets in your templates"
              }
            },
            "existingSecretNames": {
              "type": "string",
              "defaultValue": ""
            },
            "forceSecretCreation": {
              "type": "bool",
              "defaultValue": false
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true
            },
            "enabledDate": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "expirationDate": {
              "type": "string",
              "defaultValue": "[dateTimeAdd(utcNow(), 'P2Y')]"
            }
          },
          "variables": {
            "secretExists": "[contains(toLower(parameters('existingSecretNames')), format(';{0};', toLower(trim(parameters('secretName')))))]",
            "createMessage": "[if(variables('secretExists'), format('Secret {0} already exists!', parameters('secretName')), format('Added secret {0}!', parameters('secretName')))]"
          },
          "resources": [
            {
              "condition": "[or(not(variables('secretExists')), parameters('forceSecretCreation'))]",
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "attributes": {
                  "enabled": "[parameters('enabled')]",
                  "exp": "[dateTimeToEpoch(parameters('expirationDate'))]",
                  "nbf": "[dateTimeToEpoch(parameters('enabledDate'))]"
                },
                "contentType": "[parameters('contentType')]",
                "value": "[parameters('secretValue')]"
              }
            }
          ],
          "outputs": {
            "message": {
              "type": "string",
              "value": "[if(and(variables('secretExists'), parameters('forceSecretCreation')), format('Secret {0} already exists but was recreated!', parameters('secretName')), variables('createMessage'))]"
            },
            "secretCreated": {
              "type": "bool",
              "value": "[not(variables('secretExists'))]"
            },
            "secretUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretName')), '2023-07-01').secretUri]"
            },
            "secretName": {
              "type": "string",
              "value": "[parameters('secretName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('keyvault{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('keyVault-Secret-List-Names{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('secret-cosmos{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyvault{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "secretName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.keyVaultSecretName.value]"
          },
          "cosmosAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "existingSecretNames": "[if(variables('deduplicateKVSecrets'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', format('keyVault-Secret-List-Names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretNameList.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "12824537033472100481"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "secretName": {
              "type": "string"
            },
            "cosmosAccountName": {
              "type": "string"
            },
            "cosmosAccountResourceGroup": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]"
            },
            "enabledDate": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "expirationDate": {
              "type": "string",
              "defaultValue": "[dateTimeAdd(utcNow(), 'P2Y')]"
            },
            "existingSecretNames": {
              "type": "string",
              "defaultValue": ""
            },
            "forceSecretCreation": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "secretExists": "[contains(toLower(parameters('existingSecretNames')), format(';{0};', toLower(trim(parameters('secretName')))))]",
            "createMessage": "[if(variables('secretExists'), format('Secret {0} already exists!', parameters('secretName')), format('Added secret {0}!', parameters('secretName')))]"
          },
          "resources": [
            {
              "condition": "[or(not(variables('secretExists')), parameters('forceSecretCreation'))]",
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretName'))]",
              "properties": {
                "value": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('cosmosAccountResourceGroup')), 'Microsoft.DocumentDB/databaseAccounts', parameters('cosmosAccountName')), '2024-11-15').primaryMasterKey]",
                "attributes": {
                  "exp": "[dateTimeToEpoch(parameters('expirationDate'))]",
                  "nbf": "[dateTimeToEpoch(parameters('enabledDate'))]"
                }
              }
            }
          ],
          "outputs": {
            "message": {
              "type": "string",
              "value": "[if(and(variables('secretExists'), parameters('forceSecretCreation')), format('Secret {0} already exists but was recreated!', parameters('secretName')), variables('createMessage'))]"
            },
            "secretCreated": {
              "type": "bool",
              "value": "[not(variables('secretExists'))]"
            },
            "secretUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretName')), '2023-07-01').secretUri]"
            },
            "secretName": {
              "type": "string",
              "value": "[parameters('secretName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('keyvault{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('keyVault-Secret-List-Names{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('secret-storage{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyvault{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "secretName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.storageAccountConnectionStringSecretName.value]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "existingSecretNames": "[if(variables('deduplicateKVSecrets'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', format('keyVault-Secret-List-Names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretNameList.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "15281948798748424249"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "secretName": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountResourceGroup": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]"
            },
            "enabledDate": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "expirationDate": {
              "type": "string",
              "defaultValue": "[dateTimeAdd(utcNow(), 'P2Y')]"
            },
            "existingSecretNames": {
              "type": "string",
              "defaultValue": ""
            },
            "forceSecretCreation": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "secretExists": "[contains(toLower(parameters('existingSecretNames')), format(';{0};', toLower(trim(parameters('secretName')))))]",
            "createMessage": "[if(variables('secretExists'), format('Secret {0} already exists!', parameters('secretName')), format('Added secret {0}!', parameters('secretName')))]"
          },
          "resources": [
            {
              "condition": "[or(not(variables('secretExists')), parameters('forceSecretCreation'))]",
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-04-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretName'))]",
              "properties": {
                "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('storageAccountResourceGroup')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value)]",
                "attributes": {
                  "exp": "[dateTimeToEpoch(parameters('expirationDate'))]",
                  "nbf": "[dateTimeToEpoch(parameters('enabledDate'))]"
                }
              }
            }
          ],
          "outputs": {
            "message": {
              "type": "string",
              "value": "[if(and(variables('secretExists'), parameters('forceSecretCreation')), format('Secret {0} already exists but was recreated!', parameters('secretName')), variables('createMessage'))]"
            },
            "secretCreated": {
              "type": "bool",
              "value": "[not(variables('secretExists'))]"
            },
            "secretUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretName')), '2021-04-01-preview').secretUri]"
            },
            "secretName": {
              "type": "string",
              "value": "[parameters('secretName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('keyvault{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('keyVault-Secret-List-Names{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('secret-openai{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyvault{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "secretName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.cognitiveServicesKeySecretName.value]"
          },
          "cognitiveServiceName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "cognitiveServiceResourceGroup": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.resourceGroupName.value]"
          },
          "existingSecretNames": "[if(variables('deduplicateKVSecrets'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', format('keyVault-Secret-List-Names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretNameList.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7125658347864972790"
            },
            "description": "Creates or updates a secret in an Azure Key Vault."
          },
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "secretName": {
              "type": "string"
            },
            "cognitiveServiceName": {
              "type": "string"
            },
            "cognitiveServiceResourceGroup": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "contentType": {
              "type": "string",
              "defaultValue": "string"
            },
            "enabledDate": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "The value of the secret. Provide only derived values like blob storage access, but do not hard code any secrets in your templates"
              }
            },
            "expirationDate": {
              "type": "string",
              "defaultValue": "[dateTimeAdd(utcNow(), 'P2Y')]"
            },
            "existingSecretNames": {
              "type": "string",
              "defaultValue": ""
            },
            "forceSecretCreation": {
              "type": "bool",
              "defaultValue": false
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true
            }
          },
          "variables": {
            "secretExists": "[contains(toLower(parameters('existingSecretNames')), format(';{0};', toLower(trim(parameters('secretName')))))]",
            "createMessage": "[if(variables('secretExists'), format('Secret {0} already exists!', parameters('secretName')), format('Added secret {0}!', parameters('secretName')))]"
          },
          "resources": [
            {
              "condition": "[or(not(variables('secretExists')), parameters('forceSecretCreation'))]",
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "attributes": {
                  "enabled": "[parameters('enabled')]",
                  "exp": "[dateTimeToEpoch(parameters('expirationDate'))]",
                  "nbf": "[dateTimeToEpoch(parameters('enabledDate'))]"
                },
                "contentType": "[parameters('contentType')]",
                "value": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('cognitiveServiceResourceGroup')), 'Microsoft.CognitiveServices/accounts', parameters('cognitiveServiceName')), '2024-10-01').key1]"
              }
            }
          ],
          "outputs": {
            "message": {
              "type": "string",
              "value": "[if(and(variables('secretExists'), parameters('forceSecretCreation')), format('Secret {0} already exists but was recreated!', parameters('secretName')), variables('createMessage'))]"
            },
            "secretCreated": {
              "type": "bool",
              "value": "[not(variables('secretExists'))]"
            },
            "secretUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretName')), '2023-07-01').secretUri]"
            },
            "secretName": {
              "type": "string",
              "value": "[parameters('secretName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('keyvault{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('keyVault-Secret-List-Names{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('secret-doc-intelligence{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyvault{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "secretName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.keyVaultSecretName.value]"
          },
          "cognitiveServiceName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "cognitiveServiceResourceGroup": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.resourceGroupName.value]"
          },
          "existingSecretNames": "[if(variables('deduplicateKVSecrets'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', format('keyVault-Secret-List-Names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretNameList.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7125658347864972790"
            },
            "description": "Creates or updates a secret in an Azure Key Vault."
          },
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "secretName": {
              "type": "string"
            },
            "cognitiveServiceName": {
              "type": "string"
            },
            "cognitiveServiceResourceGroup": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "contentType": {
              "type": "string",
              "defaultValue": "string"
            },
            "enabledDate": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "The value of the secret. Provide only derived values like blob storage access, but do not hard code any secrets in your templates"
              }
            },
            "expirationDate": {
              "type": "string",
              "defaultValue": "[dateTimeAdd(utcNow(), 'P2Y')]"
            },
            "existingSecretNames": {
              "type": "string",
              "defaultValue": ""
            },
            "forceSecretCreation": {
              "type": "bool",
              "defaultValue": false
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true
            }
          },
          "variables": {
            "secretExists": "[contains(toLower(parameters('existingSecretNames')), format(';{0};', toLower(trim(parameters('secretName')))))]",
            "createMessage": "[if(variables('secretExists'), format('Secret {0} already exists!', parameters('secretName')), format('Added secret {0}!', parameters('secretName')))]"
          },
          "resources": [
            {
              "condition": "[or(not(variables('secretExists')), parameters('forceSecretCreation'))]",
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "attributes": {
                  "enabled": "[parameters('enabled')]",
                  "exp": "[dateTimeToEpoch(parameters('expirationDate'))]",
                  "nbf": "[dateTimeToEpoch(parameters('enabledDate'))]"
                },
                "contentType": "[parameters('contentType')]",
                "value": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('cognitiveServiceResourceGroup')), 'Microsoft.CognitiveServices/accounts', parameters('cognitiveServiceName')), '2024-10-01').key1]"
              }
            }
          ],
          "outputs": {
            "message": {
              "type": "string",
              "value": "[if(and(variables('secretExists'), parameters('forceSecretCreation')), format('Secret {0} already exists but was recreated!', parameters('secretName')), variables('createMessage'))]"
            },
            "secretCreated": {
              "type": "bool",
              "value": "[not(variables('secretExists'))]"
            },
            "secretUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretName')), '2023-07-01').secretUri]"
            },
            "secretName": {
              "type": "string",
              "value": "[parameters('secretName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('doc-intelligence{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('keyvault{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('keyVault-Secret-List-Names{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('secret-search{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyvault{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "secretName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.keyVaultSecretName.value]"
          },
          "searchServiceName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "searchServiceResourceGroup": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.resourceGroupName.value]"
          },
          "existingSecretNames": "[if(variables('deduplicateKVSecrets'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', format('keyVault-Secret-List-Names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretNameList.value), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "12456890349936451861"
            },
            "description": "Creates or updates a secret in an Azure Key Vault."
          },
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "secretName": {
              "type": "string"
            },
            "searchServiceName": {
              "type": "string"
            },
            "searchServiceResourceGroup": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "contentType": {
              "type": "string",
              "defaultValue": "string"
            },
            "enabledDate": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "expirationDate": {
              "type": "string",
              "defaultValue": "[dateTimeAdd(utcNow(), 'P2Y')]"
            },
            "existingSecretNames": {
              "type": "string",
              "defaultValue": ""
            },
            "forceSecretCreation": {
              "type": "bool",
              "defaultValue": false
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true
            }
          },
          "variables": {
            "secretExists": "[contains(toLower(parameters('existingSecretNames')), format(';{0};', toLower(trim(parameters('secretName')))))]",
            "createMessage": "[if(variables('secretExists'), format('Secret {0} already exists!', parameters('secretName')), format('Added secret {0}!', parameters('secretName')))]"
          },
          "resources": [
            {
              "condition": "[or(not(variables('secretExists')), parameters('forceSecretCreation'))]",
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "attributes": {
                  "enabled": "[parameters('enabled')]",
                  "exp": "[dateTimeToEpoch(parameters('expirationDate'))]",
                  "nbf": "[dateTimeToEpoch(parameters('enabledDate'))]"
                },
                "contentType": "[parameters('contentType')]",
                "value": "[listAdminKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('searchServiceResourceGroup')), 'Microsoft.Search/searchServices', parameters('searchServiceName')), '2023-11-01').primaryKey]"
              }
            }
          ],
          "outputs": {
            "message": {
              "type": "string",
              "value": "[if(and(variables('secretExists'), parameters('forceSecretCreation')), format('Secret {0} already exists but was recreated!', parameters('secretName')), variables('createMessage'))]"
            },
            "secretCreated": {
              "type": "bool",
              "value": "[not(variables('secretExists'))]"
            },
            "secretUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretName')), '2023-07-01').secretUri]"
            },
            "secretName": {
              "type": "string",
              "value": "[parameters('secretName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('keyvault{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('keyVault-Secret-List-Names{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cosmos{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "accountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.cosmosName.value]"
          },
          "databaseName": {
            "value": "[variables('uiDatabaseName')]"
          },
          "containerArray": {
            "value": "[variables('cosmosContainerArray')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "managedIdentityPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.managedIdentityPrincipalId.value]"
          },
          "userPrincipalId": {
            "value": "[parameters('principalId')]"
          },
          "publicNetworkAccess": "[if(parameters('publicAccessEnabled'), createObject('value', 'enabled'), createObject('value', 'disabled'))]",
          "myIpAddress": {
            "value": "[parameters('myIpAddress')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "3672270124705690129"
            }
          },
          "parameters": {
            "accountName": {
              "type": "string",
              "defaultValue": "[format('sql-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Cosmos DB account name"
              }
            },
            "existingAccountName": {
              "type": "string",
              "defaultValue": ""
            },
            "existingCosmosResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]"
            },
            "databaseName": {
              "type": "string",
              "metadata": {
                "description": "The name for the SQL database"
              }
            },
            "containerArray": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The collection of containers to create"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Cosmos DB account."
              }
            },
            "myIpAddress": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Provide the IP address to allow access to the Azure Container Registry"
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": ""
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateEndpointName": {
              "type": "string",
              "defaultValue": ""
            },
            "managedIdentityPrincipalId": {
              "type": "string",
              "defaultValue": ""
            },
            "userPrincipalId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "$fxv#0": {
              "source": {
                "url": "https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles"
              },
              "cosmos": {
                "dataContributorRoleId": "00000000-0000-0000-0000-000000000002"
              },
              "storage": {
                "blobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                "blobDataOwnerRoleId": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                "storageAccountContributorRoleId": "17d1049b-9a84-46fb-8f53-869881c3d3ab",
                "queueDataContributorRoleId": "974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                "tableContributorRoleId": "0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                "storageQueueDataMessageSender": "c6a89b2d-59bc-44d0-9896-0f6e12d7b80a"
              },
              "search": {
                "indexDataContributorRoleId": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                "indexDataReaderRoleId": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
                "serviceContributorRoleId": "7ca78c08-252a-4471-8644-bb5ff32d4ba0"
              },
              "openai": {
                "cognitiveServicesOpenAIContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
                "cognitiveServicesOpenAIUserRoleId": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd",
                "cognitiveServicesUserRoleId": "a97b65f3-24c7-4388-baec-2e87135dc908",
                "cognitiveServicesContributorRoleId": "25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                "cognitiveServicesAzureAIEngineerRoleId": "64702f94-c441-49e6-a78b-ef80e0188fee"
              },
              "ml": {
                "dataScientistRole": "f6c7c914-8db3-469d-8ca1-694a8f32e121"
              },
              "containerregistry": {
                "acrPullRoleId": "7f951dda-4ed3-4680-a7ca-43fe172d538d"
              },
              "keyvault": {
                "secretsUserRoleId": "4633458b-17de-408a-b874-0445c86b69e6",
                "secretsOfficerRoleId": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7"
              },
              "apim": {
                "serviceReaderRoleId": "71522526-b88f-4d52-b57f-d31fc3546d0d"
              }
            },
            "connectionStringSecretName": "azure-cosmos-connection-string",
            "useExistingAccount": "[not(empty(parameters('existingAccountName')))]",
            "roleDefinitions": "[variables('$fxv#0')]"
          },
          "resources": [
            {
              "condition": "[not(variables('useExistingAccount'))]",
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2024-08-15",
              "name": "[toLower(parameters('accountName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "GlobalDocumentDB",
              "properties": {
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "disableKeyBasedMetadataWriteAccess": false,
                "disableLocalAuth": false,
                "enableFreeTier": false,
                "enableAnalyticalStorage": false,
                "createMode": "Default",
                "databaseAccountOfferType": "Standard",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "networkAclBypass": "AzureServices",
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session",
                  "maxIntervalInSeconds": 5,
                  "maxStalenessPrefix": 100
                },
                "locations": [
                  {
                    "locationName": "[parameters('location')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "cors": [],
                "capabilities": [
                  {
                    "name": "EnableServerless"
                  }
                ],
                "ipRules": "[if(empty(parameters('myIpAddress')), createArray(), createArray(createObject('ipAddressOrRange', parameters('myIpAddress'))))]"
              }
            },
            {
              "condition": "[not(variables('useExistingAccount'))]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2024-08-15",
              "name": "[format('{0}/{1}', toLower(parameters('accountName')), parameters('databaseName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "resource": {
                  "id": "[parameters('databaseName')]"
                },
                "options": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
              ]
            },
            {
              "copy": {
                "name": "chatContainer",
                "count": "[length(parameters('containerArray'))]"
              },
              "condition": "[not(variables('useExistingAccount'))]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-08-15",
              "name": "[format('{0}/{1}/{2}', toLower(parameters('accountName')), parameters('databaseName'), parameters('containerArray')[copyIndex()].Name)]",
              "tags": "[parameters('tags')]",
              "properties": {
                "resource": {
                  "id": "[parameters('containerArray')[copyIndex()].name]",
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "automatic": true,
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/\"_etag\"/?"
                      }
                    ]
                  },
                  "partitionKey": {
                    "paths": [
                      "[parameters('containerArray')[copyIndex()].partitionKey]"
                    ],
                    "kind": "Hash"
                  },
                  "conflictResolutionPolicy": {
                    "mode": "LastWriterWins",
                    "conflictResolutionPath": "/_ts"
                  }
                },
                "options": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(parameters('accountName')), parameters('databaseName'))]"
              ]
            },
            {
              "condition": "[not(variables('useExistingAccount'))]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2024-08-15",
              "name": "[format('{0}/{1}', toLower(parameters('accountName')), guid(resourceGroup().id, parameters('managedIdentityPrincipalId'), variables('roleDefinitions').cosmos.dataContributorRoleId, resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))))]",
              "properties": {
                "principalId": "[parameters('managedIdentityPrincipalId')]",
                "roleDefinitionId": "[format('{0}/providers/Microsoft.DocumentDB/databaseAccounts/{1}/sqlRoleDefinitions/{2}', resourceGroup().id, parameters('databaseName'), variables('roleDefinitions').cosmos.dataContributorRoleId)]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(parameters('accountName')), parameters('databaseName'))]"
              ]
            },
            {
              "condition": "[and(not(variables('useExistingAccount')), not(equals(parameters('userPrincipalId'), '')))]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2024-08-15",
              "name": "[format('{0}/{1}', toLower(parameters('accountName')), guid(resourceGroup().id, parameters('userPrincipalId'), variables('roleDefinitions').cosmos.dataContributorRoleId, resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))))]",
              "properties": {
                "principalId": "[parameters('userPrincipalId')]",
                "roleDefinitionId": "[format('{0}/providers/Microsoft.DocumentDB/databaseAccounts/{1}/sqlRoleDefinitions/{2}', resourceGroup().id, parameters('databaseName'), variables('roleDefinitions').cosmos.dataContributorRoleId)]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(parameters('accountName')), parameters('databaseName'))]"
              ]
            },
            {
              "condition": "[and(not(variables('useExistingAccount')), not(empty(parameters('privateEndpointSubnetId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-private-endpoint', parameters('accountName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('privateEndpointName')]"
                  },
                  "groupIds": {
                    "value": [
                      "Sql"
                    ]
                  },
                  "targetResourceId": {
                    "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17553196814899236809"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to create"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The region where the private endpoint will be created"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the subnet where the private endpoint will be created"
                      }
                    },
                    "targetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the resource to which the private endpoint will be connected"
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "An array of group IDs of the service type that they private endpoint will be connect to"
                      }
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone for this resource"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The tags to associate with the private endpoint"
                      }
                    }
                  },
                  "variables": {
                    "nicName": "[format('{0}-nic', parameters('privateEndpointName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[variables('nicName')]",
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('targetResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('dnsZoneId'), ''))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-06-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}-dns-group', parameters('privateEndpointName')))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "default",
                            "properties": {
                              "privateDnsZoneId": "[parameters('dnsZoneId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "privateEndpointName": {
                      "type": "string",
                      "value": "[parameters('privateEndpointName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(variables('useExistingAccount'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingCosmosResourceGroupName')), 'Microsoft.DocumentDB/databaseAccounts', parameters('existingAccountName')), resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName'))))]"
            },
            "name": {
              "type": "string",
              "value": "[if(variables('useExistingAccount'), parameters('existingAccountName'), toLower(parameters('accountName')))]"
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[if(variables('useExistingAccount'), parameters('existingCosmosResourceGroupName'), resourceGroup().name)]"
            },
            "endpoint": {
              "type": "string",
              "value": "[if(variables('useExistingAccount'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingCosmosResourceGroupName')), 'Microsoft.DocumentDB/databaseAccounts', parameters('existingAccountName')), '2024-08-15').documentEndpoint, reference(resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName'))), '2024-08-15').documentEndpoint)]"
            },
            "keyVaultSecretName": {
              "type": "string",
              "value": "[variables('connectionStringSecretName')]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[parameters('privateEndpointName')]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('databaseName')]"
            },
            "connectionStringSecretName": {
              "type": "string",
              "value": "[variables('connectionStringSecretName')]"
            },
            "containerNames": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('containerArray'))]",
                "input": {
                  "name": "[parameters('containerArray')[copyIndex()]]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('search{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.searchServiceName.value]"
          },
          "publicNetworkAccess": "[if(parameters('publicAccessEnabled'), createObject('value', 'enabled'), createObject('value', 'disabled'))]",
          "myIpAddress": {
            "value": "[parameters('myIpAddress')]"
          },
          "managedIdentityId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.managedIdentityId.value]"
          },
          "sku": {
            "value": {
              "name": "basic"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "3561749510729289785"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": ""
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "existingSearchServiceName": {
              "type": "string",
              "defaultValue": ""
            },
            "existingSearchServiceResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]"
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "standard"
              }
            },
            "myIpAddress": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Ip Address to allow access to the Azure Search Service"
              }
            },
            "partitionCount": {
              "type": "int",
              "defaultValue": 1
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "disabled",
              "allowedValues": [
                "enabled",
                "disabled"
              ]
            },
            "replicaCount": {
              "type": "int",
              "defaultValue": 1
            },
            "semanticSearch": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "disabled",
                "free",
                "standard"
              ],
              "metadata": {
                "description": "Optional. Sets options that control the availability of semantic search. This configuration is only possible for certain search SKUs in certain locations. Free Sku = disabled"
              }
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateEndpointName": {
              "type": "string",
              "defaultValue": ""
            },
            "managedIdentityId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "useExistingSearchService": "[not(empty(parameters('existingSearchServiceName')))]",
            "resourceGroupName": "[resourceGroup().name]",
            "searchKeySecretName": "search-key"
          },
          "resources": [
            {
              "condition": "[not(variables('useExistingSearchService'))]",
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2024-06-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('managedIdentityId'))]": {}
                }
              },
              "properties": {
                "networkRuleSet": "[if(equals(parameters('publicNetworkAccess'), 'enabled'), createObject(), createObject('bypass', 'AzurePortal', 'ipRules', if(empty(parameters('myIpAddress')), createArray(), createArray(createObject('value', parameters('myIpAddress'))))))]",
                "partitionCount": "[parameters('partitionCount')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "replicaCount": "[parameters('replicaCount')]",
                "semanticSearch": "[parameters('semanticSearch')]",
                "authOptions": {
                  "aadOrApiKey": {
                    "aadAuthFailureMode": "http401WithBearerChallenge"
                  }
                }
              },
              "sku": "[parameters('sku')]"
            },
            {
              "condition": "[and(not(variables('useExistingSearchService')), not(empty(parameters('privateEndpointSubnetId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-private-endpoint', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('privateEndpointName')]"
                  },
                  "groupIds": {
                    "value": [
                      "searchService"
                    ]
                  },
                  "targetResourceId": {
                    "value": "[resourceId('Microsoft.Search/searchServices', parameters('name'))]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17553196814899236809"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to create"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The region where the private endpoint will be created"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the subnet where the private endpoint will be created"
                      }
                    },
                    "targetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the resource to which the private endpoint will be connected"
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "An array of group IDs of the service type that they private endpoint will be connect to"
                      }
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone for this resource"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The tags to associate with the private endpoint"
                      }
                    }
                  },
                  "variables": {
                    "nicName": "[format('{0}-nic', parameters('privateEndpointName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[variables('nicName')]",
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('targetResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('dnsZoneId'), ''))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-06-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}-dns-group', parameters('privateEndpointName')))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "default",
                            "properties": {
                              "privateDnsZoneId": "[parameters('dnsZoneId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "privateEndpointName": {
                      "type": "string",
                      "value": "[parameters('privateEndpointName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(variables('useExistingSearchService'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingSearchServiceResourceGroupName')), 'Microsoft.Search/searchServices', parameters('existingSearchServiceName')), resourceId('Microsoft.Search/searchServices', parameters('name')))]"
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[if(variables('useExistingSearchService'), parameters('existingSearchServiceResourceGroupName'), variables('resourceGroupName'))]"
            },
            "name": {
              "type": "string",
              "value": "[if(variables('useExistingSearchService'), parameters('existingSearchServiceName'), parameters('name'))]"
            },
            "endpoint": {
              "type": "string",
              "value": "[if(variables('useExistingSearchService'), format('https://{0}.search.windows.net/', parameters('existingSearchServiceName')), format('https://{0}.search.windows.net/', parameters('name')))]"
            },
            "searchKeySecretName": {
              "type": "string",
              "value": "[variables('searchKeySecretName')]"
            },
            "keyVaultSecretName": {
              "type": "string",
              "value": "[variables('searchKeySecretName')]"
            },
            "privateEndpointId": {
              "type": "string",
              "value": "[if(empty(parameters('privateEndpointSubnetId')), '', if(variables('useExistingSearchService'), resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName')), reference(resourceId('Microsoft.Resources/deployments', format('{0}-private-endpoint', parameters('name'))), '2022-09-01').outputs.privateEndpointId.value))]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[parameters('privateEndpointName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('openai{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "managedIdentityId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.managedIdentityId.value]"
          },
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.cogServiceName.value]"
          },
          "location": {
            "value": "[parameters('openAI_deploy_location')]"
          },
          "pe_location": {
            "value": "[parameters('location')]"
          },
          "appInsightsName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('law{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.applicationInsightsName.value]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "textEmbeddings": {
            "value": [
              {
                "name": "text-embedding",
                "model": {
                  "format": "OpenAI",
                  "name": "text-embedding-ada-002",
                  "version": "2"
                }
              }
            ]
          },
          "chatGpt_Standard": {
            "value": {
              "DeploymentName": "gpt-35-turbo",
              "ModelName": "gpt-35-turbo",
              "ModelVersion": "0125",
              "DeploymentCapacity": 10
            }
          },
          "chatGpt_Premium": {
            "value": {
              "DeploymentName": "gpt-4o",
              "ModelName": "gpt-4o",
              "ModelVersion": "2024-08-06",
              "DeploymentCapacity": 10
            }
          },
          "publicNetworkAccess": "[if(parameters('publicAccessEnabled'), createObject('value', 'enabled'), createObject('value', 'disabled'))]",
          "myIpAddress": {
            "value": "[parameters('myIpAddress')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7282394659176478929"
            }
          },
          "parameters": {
            "existing_CogServices_Name": {
              "type": "string",
              "defaultValue": ""
            },
            "existing_CogServices_RG_Name": {
              "type": "string",
              "defaultValue": ""
            },
            "name": {
              "type": "string",
              "defaultValue": ""
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "pe_location": {
              "type": "string",
              "defaultValue": "[parameters('location')]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "appInsightsName": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": "AIServices",
              "allowedValues": [
                "OpenAI",
                "AIServices"
              ],
              "metadata": {
                "description": "The Kind of AI Service, can be \"OpenAI\" or \"AIServices\""
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": ""
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "S0"
              }
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateEndpointName": {
              "type": "string",
              "defaultValue": ""
            },
            "myIpAddress": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Provide the IP address to allow access to the Azure Container Registry"
              }
            },
            "managedIdentityId": {
              "type": "string"
            },
            "textEmbeddings": {
              "type": "array",
              "defaultValue": []
            },
            "chatGpt_Standard": {
              "type": "object",
              "defaultValue": {}
            },
            "chatGpt_Premium": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "resourceGroupName": "[resourceGroup().name]",
            "useExistingService": "[not(empty(parameters('existing_CogServices_Name')))]",
            "deployInVNET": "[not(empty(parameters('privateEndpointSubnetId')))]",
            "cognitiveServicesKeySecretName": "cognitive-services-key",
            "deployments": "[union(parameters('textEmbeddings'), createArray(createObject('name', parameters('chatGpt_Standard').DeploymentName, 'model', createObject('format', 'OpenAI', 'name', parameters('chatGpt_Standard').ModelName, 'version', parameters('chatGpt_Standard').ModelVersion), 'sku', coalesce(tryGet(parameters('chatGpt_Standard'), 'sku'), createObject('name', 'Standard', 'capacity', parameters('chatGpt_Standard').DeploymentCapacity))), createObject('name', parameters('chatGpt_Premium').DeploymentName, 'model', createObject('format', 'OpenAI', 'name', parameters('chatGpt_Premium').ModelName, 'version', parameters('chatGpt_Premium').ModelVersion), 'sku', coalesce(tryGet(parameters('chatGpt_Premium'), 'sku'), createObject('name', 'Standard', 'capacity', parameters('chatGpt_Premium').DeploymentCapacity)))))]"
          },
          "resources": [
            {
              "condition": "[not(variables('useExistingService'))]",
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-04-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('managedIdentityId'))]": {}
                }
              },
              "properties": {
                "allowProjectManagement": true,
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "[if(empty(parameters('myIpAddress')), 'Allow', 'Deny')]",
                  "ipRules": "[if(empty(parameters('myIpAddress')), createArray(), createArray(createObject('value', parameters('myIpAddress'))))]"
                },
                "customSubDomainName": "[toLower(format('{0}', parameters('name')))]"
              },
              "sku": "[parameters('sku')]"
            },
            {
              "copy": {
                "name": "deployment",
                "count": "[length(variables('deployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[not(variables('useExistingService'))]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('deployments')[copyIndex()].name)]",
              "properties": {
                "model": "[variables('deployments')[copyIndex()].model]"
              },
              "sku": "[coalesce(tryGet(variables('deployments')[copyIndex()], 'sku'), createObject('name', 'Standard', 'capacity', 20))]",
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'applicationInsights')]",
              "properties": {
                "category": "AppInsights",
                "target": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
                "authType": "ApiKey",
                "isSharedToAll": true,
                "credentials": {
                  "key": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey]"
                },
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(variables('deployInVNET'), not(variables('useExistingService')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-private-endpoint', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "location": {
                    "value": "[parameters('pe_location')]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('privateEndpointName')]"
                  },
                  "groupIds": {
                    "value": [
                      "account"
                    ]
                  },
                  "targetResourceId": {
                    "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17553196814899236809"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to create"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The region where the private endpoint will be created"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the subnet where the private endpoint will be created"
                      }
                    },
                    "targetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the resource to which the private endpoint will be connected"
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "An array of group IDs of the service type that they private endpoint will be connect to"
                      }
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone for this resource"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The tags to associate with the private endpoint"
                      }
                    }
                  },
                  "variables": {
                    "nicName": "[format('{0}-nic', parameters('privateEndpointName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[variables('nicName')]",
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('targetResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('dnsZoneId'), ''))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-06-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}-dns-group', parameters('privateEndpointName')))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "default",
                            "properties": {
                              "privateDnsZoneId": "[parameters('dnsZoneId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "privateEndpointName": {
                      "type": "string",
                      "value": "[parameters('privateEndpointName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(variables('deployInVNET'), not(variables('useExistingService')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-openai-private-endpoint', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "location": {
                    "value": "[parameters('pe_location')]"
                  },
                  "privateEndpointName": {
                    "value": "[format('{0}-openAi-private-link-service-connection', parameters('name'))]"
                  },
                  "groupIds": {
                    "value": [
                      "account"
                    ]
                  },
                  "targetResourceId": {
                    "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17553196814899236809"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to create"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The region where the private endpoint will be created"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the subnet where the private endpoint will be created"
                      }
                    },
                    "targetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the resource to which the private endpoint will be connected"
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "An array of group IDs of the service type that they private endpoint will be connect to"
                      }
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone for this resource"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The tags to associate with the private endpoint"
                      }
                    }
                  },
                  "variables": {
                    "nicName": "[format('{0}-nic', parameters('privateEndpointName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[variables('nicName')]",
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('targetResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('dnsZoneId'), ''))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-06-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}-dns-group', parameters('privateEndpointName')))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "default",
                            "properties": {
                              "privateDnsZoneId": "[parameters('dnsZoneId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "privateEndpointName": {
                      "type": "string",
                      "value": "[parameters('privateEndpointName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(variables('useExistingService'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existing_CogServices_RG_Name')), 'Microsoft.CognitiveServices/accounts', parameters('existing_CogServices_Name')), resourceId('Microsoft.CognitiveServices/accounts', parameters('name')))]"
            },
            "name": {
              "type": "string",
              "value": "[if(variables('useExistingService'), parameters('existing_CogServices_Name'), parameters('name'))]"
            },
            "endpoint": {
              "type": "string",
              "value": "[if(variables('useExistingService'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existing_CogServices_RG_Name')), 'Microsoft.CognitiveServices/accounts', parameters('existing_CogServices_Name')), '2025-04-01-preview').endpoint, reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2025-04-01-preview').endpoint)]"
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[if(variables('useExistingService'), parameters('existing_CogServices_RG_Name'), variables('resourceGroupName'))]"
            },
            "cognitiveServicesKeySecretName": {
              "type": "string",
              "value": "[variables('cognitiveServicesKeySecretName')]"
            },
            "textEmbeddings": {
              "type": "array",
              "value": "[parameters('textEmbeddings')]"
            },
            "chatGpt_Standard": {
              "type": "object",
              "value": "[parameters('chatGpt_Standard')]"
            },
            "kind": {
              "type": "string",
              "value": "[parameters('kind')]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[if(and(variables('deployInVNET'), not(variables('useExistingService'))), reference(resourceId('Microsoft.Resources/deployments', format('{0}-private-endpoint', parameters('name'))), '2022-09-01').outputs.privateEndpointName.value, '')]"
            },
            "privateEndpointName2": {
              "type": "string",
              "value": "[if(and(variables('deployInVNET'), not(variables('useExistingService'))), reference(resourceId('Microsoft.Resources/deployments', format('{0}-openai-private-endpoint', parameters('name'))), '2022-09-01').outputs.privateEndpointName.value, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('law{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('doc-intelligence{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.documentIntelligenceName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "publicNetworkAccess": "[if(parameters('publicAccessEnabled'), createObject('value', 'enabled'), createObject('value', 'disabled'))]",
          "myIpAddress": {
            "value": "[parameters('myIpAddress')]"
          },
          "managedIdentityId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.managedIdentityId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "16209990092370689154"
            }
          },
          "parameters": {
            "existing_CogServices_Name": {
              "type": "string",
              "defaultValue": ""
            },
            "existing_CogServices_RG_Name": {
              "type": "string",
              "defaultValue": ""
            },
            "name": {
              "type": "string",
              "defaultValue": ""
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "pe_location": {
              "type": "string",
              "defaultValue": "[parameters('location')]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "kind": {
              "type": "string",
              "defaultValue": "FormRecognizer"
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled"
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "S0"
              }
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateEndpointName": {
              "type": "string",
              "defaultValue": ""
            },
            "myIpAddress": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Provide the IP address to allow access to the Azure Container Registry"
              }
            },
            "managedIdentityId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "useExistingService": "[not(empty(parameters('existing_CogServices_Name')))]",
            "resourceGroupName": "[resourceGroup().name]",
            "cognitiveServicesKeySecretName": "form-recognizer-services-key"
          },
          "resources": [
            {
              "condition": "[not(variables('useExistingService'))]",
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('managedIdentityId'))]": {}
                }
              },
              "properties": {
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "networkAcls": {
                  "defaultAction": "[if(equals(parameters('publicNetworkAccess'), 'Enabled'), 'Allow', 'Deny')]",
                  "ipRules": "[if(empty(parameters('myIpAddress')), createArray(), createArray(createObject('value', parameters('myIpAddress'))))]"
                },
                "customSubDomainName": "[parameters('name')]"
              },
              "sku": "[parameters('sku')]"
            },
            {
              "condition": "[and(not(variables('useExistingService')), not(empty(parameters('privateEndpointSubnetId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-private-endpoint', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('pe_location')]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('privateEndpointName')]"
                  },
                  "groupIds": {
                    "value": [
                      "account"
                    ]
                  },
                  "targetResourceId": {
                    "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
                  },
                  "subnetId": {
                    "value": "[parameters('privateEndpointSubnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17553196814899236809"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint to create"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The region where the private endpoint will be created"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the subnet where the private endpoint will be created"
                      }
                    },
                    "targetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the resource to which the private endpoint will be connected"
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "An array of group IDs of the service type that they private endpoint will be connect to"
                      }
                    },
                    "dnsZoneId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone for this resource"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The tags to associate with the private endpoint"
                      }
                    }
                  },
                  "variables": {
                    "nicName": "[format('{0}-nic', parameters('privateEndpointName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[variables('nicName')]",
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('privateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('targetResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('dnsZoneId'), ''))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-06-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}-dns-group', parameters('privateEndpointName')))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "default",
                            "properties": {
                              "privateDnsZoneId": "[parameters('dnsZoneId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateEndpointId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
                    },
                    "privateEndpointName": {
                      "type": "string",
                      "value": "[parameters('privateEndpointName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(variables('useExistingService'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existing_CogServices_RG_Name')), 'Microsoft.CognitiveServices/accounts', parameters('existing_CogServices_Name')), resourceId('Microsoft.CognitiveServices/accounts', parameters('name')))]"
            },
            "name": {
              "type": "string",
              "value": "[if(variables('useExistingService'), parameters('existing_CogServices_Name'), parameters('name'))]"
            },
            "endpoint": {
              "type": "string",
              "value": "[if(variables('useExistingService'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existing_CogServices_RG_Name')), 'Microsoft.CognitiveServices/accounts', parameters('existing_CogServices_Name')), '2023-05-01').endpoint, reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').endpoint)]"
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[if(variables('useExistingService'), parameters('existing_CogServices_RG_Name'), variables('resourceGroupName'))]"
            },
            "keyVaultSecretName": {
              "type": "string",
              "value": "[variables('cognitiveServicesKeySecretName')]"
            },
            "privateEndpointName": {
              "type": "string",
              "value": "[parameters('privateEndpointName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('aiHub{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.aiHubName.value]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "applicationInsightsId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('law{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.applicationInsightsId.value]"
          },
          "storageAccountId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.id.value]"
          },
          "aiServiceKind": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.kind.value]"
          },
          "aiServicesId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.id.value]"
          },
          "aiServicesName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "aiServicesTarget": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.endpoint.value]"
          },
          "aiSearchId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.id.value]"
          },
          "aiSearchName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "9144325727789082778"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location into which the Azure AI resources should be deployed."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Foundry Hub resource"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to be applied to all deployed resources"
              }
            },
            "applicationInsightsId": {
              "type": "string",
              "metadata": {
                "description": "Application Insights ID where data will be sent"
              }
            },
            "storageAccountId": {
              "type": "string",
              "metadata": {
                "description": "Storage account ID to be used by the AI Foundry Project"
              }
            },
            "aiServiceKind": {
              "type": "string",
              "metadata": {
                "description": "AI Service Account kind: either OpenAI or AIServices"
              }
            },
            "aiServicesName": {
              "type": "string",
              "metadata": {
                "description": "Name AI Services resource"
              }
            },
            "aiServicesTarget": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI Services endpoint"
              }
            },
            "aiServicesId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI Services resource"
              }
            },
            "aiSearchName": {
              "type": "string",
              "metadata": {
                "description": "Name AI Search resource"
              }
            },
            "aiSearchId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI Search resource"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Basic"
            },
            "skuTier": {
              "type": "string",
              "defaultValue": "Basic"
            }
          },
          "variables": {
            "aoaiConnection": "[format('{0}-connection-AIServices_aoai', parameters('name'))]",
            "kindAIServicesExists": "[equals(parameters('aiServiceKind'), 'AIServices')]",
            "aiServiceConnectionName": "[if(variables('kindAIServicesExists'), format('{0}-connection-AIServices', parameters('name')), variables('aoaiConnection'))]"
          },
          "resources": [
            {
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2025-04-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuTier')]"
              },
              "kind": "hub",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "friendlyName": "[parameters('name')]",
                "applicationInsights": "[parameters('applicationInsightsId')]",
                "storageAccount": "[parameters('storageAccountId')]",
                "publicNetworkAccess": "Enabled"
              }
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2025-04-01",
              "name": "[format('{0}/{1}', parameters('name'), variables('aiServiceConnectionName'))]",
              "properties": {
                "category": "[parameters('aiServiceKind')]",
                "target": "[parameters('aiServicesTarget')]",
                "authType": "ManagedIdentity",
                "isSharedToAll": true,
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[parameters('aiServicesId')]",
                  "location": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2025-04-01-preview', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2025-04-01",
              "name": "[format('{0}/{1}', parameters('name'), format('{0}-connection-search', parameters('name')))]",
              "properties": {
                "category": "CognitiveSearch",
                "target": "[format('https://{0}.search.windows.net/', parameters('aiSearchName'))]",
                "authType": "ManagedIdentity",
                "isSharedToAll": true,
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[parameters('aiSearchId')]",
                  "location": "[reference(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), '2024-06-01-preview', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), '2025-04-01-preview', 'full').identity.principalId]"
            },
            "connection_aisvcId": {
              "type": "string",
              "value": "[resourceId('Microsoft.MachineLearningServices/workspaces/connections', parameters('name'), variables('aiServiceConnectionName'))]"
            },
            "connection_searchId": {
              "type": "string",
              "value": "[resourceId('Microsoft.MachineLearningServices/workspaces/connections', parameters('name'), format('{0}-connection-search', parameters('name')))]"
            },
            "connection_aisvcName": {
              "type": "string",
              "value": "[variables('aiServiceConnectionName')]"
            },
            "connection_searchName": {
              "type": "string",
              "value": "[format('{0}-connection-search', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('law{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('aiFoundryProject{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.aiHubFoundryProjectName.value]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "hubId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('aiHub{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "18154217394927619302"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location into which the Azure AI resources should be deployed."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Foundry Project resource"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to be applied to all deployed resources"
              }
            },
            "hubId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the AI Foundry Hub to associate with this project."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2025-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "project",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "friendlyName": "[parameters('name')]",
                "hubResourceId": "[parameters('hubId')]",
                "publicNetworkAccess": "Enabled"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), '2025-04-01', 'full').identity.principalId]"
            },
            "connectionString": {
              "type": "string",
              "value": "[format('{0}.api.azureml.ms;{1};{2};{3}', parameters('location'), subscription().subscriptionId, resourceGroup().name, parameters('name'))]"
            },
            "endpoint": {
              "type": "string",
              "value": "[format('https://{0}.services.ai.azure.com/api/projects/{1}', parameters('name'), parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('aiHub{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('addRoleAssignments')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('foundry-roles{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "identityPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('aiFoundryProject{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.principalId.value]"
          },
          "principalType": {
            "value": "ServicePrincipal"
          },
          "aiServicesName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7244741543290095711"
            }
          },
          "parameters": {
            "identityPrincipalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "ServicePrincipal",
                "User"
              ]
            },
            "registryName": {
              "type": "string",
              "defaultValue": ""
            },
            "storageAccountName": {
              "type": "string",
              "defaultValue": ""
            },
            "aiSearchName": {
              "type": "string",
              "defaultValue": ""
            },
            "aiServicesName": {
              "type": "string",
              "defaultValue": ""
            },
            "cosmosName": {
              "type": "string",
              "defaultValue": ""
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": ""
            },
            "apimName": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "$fxv#0": {
              "source": {
                "url": "https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles"
              },
              "cosmos": {
                "dataContributorRoleId": "00000000-0000-0000-0000-000000000002"
              },
              "storage": {
                "blobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                "blobDataOwnerRoleId": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                "storageAccountContributorRoleId": "17d1049b-9a84-46fb-8f53-869881c3d3ab",
                "queueDataContributorRoleId": "974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                "tableContributorRoleId": "0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                "storageQueueDataMessageSender": "c6a89b2d-59bc-44d0-9896-0f6e12d7b80a"
              },
              "search": {
                "indexDataContributorRoleId": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                "indexDataReaderRoleId": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
                "serviceContributorRoleId": "7ca78c08-252a-4471-8644-bb5ff32d4ba0"
              },
              "openai": {
                "cognitiveServicesOpenAIContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
                "cognitiveServicesOpenAIUserRoleId": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd",
                "cognitiveServicesUserRoleId": "a97b65f3-24c7-4388-baec-2e87135dc908",
                "cognitiveServicesContributorRoleId": "25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                "cognitiveServicesAzureAIEngineerRoleId": "64702f94-c441-49e6-a78b-ef80e0188fee"
              },
              "ml": {
                "dataScientistRole": "f6c7c914-8db3-469d-8ca1-694a8f32e121"
              },
              "containerregistry": {
                "acrPullRoleId": "7f951dda-4ed3-4680-a7ca-43fe172d538d"
              },
              "keyvault": {
                "secretsUserRoleId": "4633458b-17de-408a-b874-0445c86b69e6",
                "secretsOfficerRoleId": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7"
              },
              "apim": {
                "serviceReaderRoleId": "71522526-b88f-4d52-b57f-d31fc3546d0d"
              }
            },
            "roleDefinitions": "[variables('$fxv#0')]",
            "addRegistryRoles": "[not(empty(parameters('registryName')))]",
            "addStorageRoles": "[not(empty(parameters('storageAccountName')))]",
            "addSearchRoles": "[not(empty(parameters('aiSearchName')))]",
            "addCogServicesRoles": "[not(empty(parameters('aiServicesName')))]",
            "addCosmosRoles": "[not(empty(parameters('cosmosName')))]",
            "addKeyVaultRoles": "[not(empty(parameters('keyVaultName')))]",
            "addApimRoles": "[not(empty(parameters('apimName')))]"
          },
          "resources": [
            {
              "condition": "[variables('addRegistryRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('registryName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), parameters('identityPrincipalId'), variables('roleDefinitions').containerregistry.acrPullRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').containerregistry.acrPullRoleId)]",
                "description": "[format('Permission for {0} {1} to pull images from the registry {2}', parameters('principalType'), parameters('identityPrincipalId'), parameters('registryName'))]"
              }
            },
            {
              "condition": "[variables('addStorageRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.blobDataContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').storage.blobDataContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to write to the storage account {2} Blob', parameters('principalType'), parameters('identityPrincipalId'), parameters('storageAccountName'))]"
              }
            },
            {
              "condition": "[variables('addStorageRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.tableContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').storage.tableContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to write to the storage account {2} Table', parameters('principalType'), parameters('identityPrincipalId'), parameters('storageAccountName'))]"
              }
            },
            {
              "condition": "[variables('addStorageRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.queueDataContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').storage.queueDataContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to write to the storage account {2} Queue', parameters('principalType'), parameters('identityPrincipalId'), parameters('storageAccountName'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIUserRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesOpenAIUserRoleId)]",
                "description": "[format('Permission for {0} {1} to be OpenAI User', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesOpenAIContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to be OpenAI Contributor', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesUserRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesUserRoleId)]",
                "description": "[format('Permission for {0} {1} to be a Cognitive Services User', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to be a Cognitive Services Contributor', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesAzureAIEngineerRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesAzureAIEngineerRoleId)]",
                "description": "[format('Permission for {0} {1} to be a Cognitive Services Azure AI Engineer', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addSearchRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').search.indexDataContributorRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to use the modify search service indexes', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addSearchRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataReaderRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').search.indexDataReaderRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to use the read search service indexes', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addSearchRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.serviceContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').search.serviceContributorRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to be a search service contributor', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCosmosRoles')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2024-08-15",
              "name": "[format('{0}/{1}', parameters('cosmosName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), parameters('identityPrincipalId'), variables('roleDefinitions').cosmos.dataContributorRoleId))]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[format('{0}/providers/Microsoft.DocumentDB/databaseAccounts/{1}/sqlRoleDefinitions/{2}', resourceGroup().id, parameters('cosmosName'), variables('roleDefinitions').cosmos.dataContributorRoleId)]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName'))]"
              }
            },
            {
              "condition": "[variables('addKeyVaultRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('identityPrincipalId'), variables('roleDefinitions').keyvault.secretsOfficerRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').keyvault.secretsOfficerRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to be a Key Vault Secrets Officer', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addApimRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ApiManagement/service/{0}', parameters('apimName'))]",
              "name": "[guid(resourceId('Microsoft.ApiManagement/service', parameters('apimName')), parameters('identityPrincipalId'), variables('roleDefinitions').apim.serviceReaderRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').apim.serviceReaderRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to be a APIM Service Reader', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            }
          ],
          "outputs": {
            "containerRegistryRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addRegistryRoles'), createObject('registry_AcrPull_RoleId', extensionResourceId(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), parameters('identityPrincipalId'), variables('roleDefinitions').containerregistry.acrPullRoleId))), createObject())]"
            },
            "storageRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addStorageRoles'), createObject('storage_BlobContributor_RoleId', extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.blobDataContributorRoleId)), 'storage_TableContributor_RoleId', extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.tableContributorRoleId)), 'storage_QueueContributor_RoleId', extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.queueDataContributorRoleId))), createObject())]"
            },
            "cognitiveServicesRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addCogServicesRoles'), createObject('cognitiveServices_OpenAIUser_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIUserRoleId)), 'cognitiveServices_OpenAIContributor_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIContributorRoleId)), 'cognitiveServices_User_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesUserRoleId)), 'cognitiveServices_Contributor_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesContributorRoleId)), 'cognitiveServices_AzureAIEngineer_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesAzureAIEngineerRoleId))), createObject())]"
            },
            "searchServiceRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addSearchRoles'), createObject('search_IndexDataContributor_RoleId', extensionResourceId(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataContributorRoleId)), 'search_IndexDataReader_RoleId', extensionResourceId(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataReaderRoleId)), 'search_ServiceContributor_RoleId', extensionResourceId(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.serviceContributorRoleId))), createObject())]"
            },
            "cosmosRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addCosmosRoles'), createObject('cosmos_UserAccess_RoleId', resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments', parameters('cosmosName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), parameters('identityPrincipalId'), variables('roleDefinitions').cosmos.dataContributorRoleId))), createObject())]"
            },
            "keyVaultRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addKeyVaultRoles'), createObject('keyVault_SecretsOfficer_RoleId', extensionResourceId(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('identityPrincipalId'), variables('roleDefinitions').keyvault.secretsOfficerRoleId))), createObject())]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('aiFoundryProject{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('aiProject{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "accountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "projectName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.aiHubProjectName.value]"
          },
          "projectDescription": {
            "value": "[parameters('aiProjectDescription')]"
          },
          "displayName": {
            "value": "[parameters('aiProjectFriendlyName')]"
          },
          "aiSearchName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "aiSearchServiceResourceGroupName": {
            "value": "[resourceGroup().name]"
          },
          "aiSearchServiceSubscriptionId": {
            "value": "[subscription().subscriptionId]"
          },
          "cosmosDBName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "cosmosDBResourceGroupName": {
            "value": "[resourceGroup().name]"
          },
          "cosmosDBSubscriptionId": {
            "value": "[subscription().subscriptionId]"
          },
          "azureStorageName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "azureStorageResourceGroupName": {
            "value": "[resourceGroup().name]"
          },
          "azureStorageSubscriptionId": {
            "value": "[subscription().subscriptionId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "14596922470763829736"
            }
          },
          "parameters": {
            "accountName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "projectName": {
              "type": "string"
            },
            "projectDescription": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            },
            "aiSearchName": {
              "type": "string"
            },
            "aiSearchServiceResourceGroupName": {
              "type": "string"
            },
            "aiSearchServiceSubscriptionId": {
              "type": "string"
            },
            "cosmosDBName": {
              "type": "string"
            },
            "cosmosDBSubscriptionId": {
              "type": "string"
            },
            "cosmosDBResourceGroupName": {
              "type": "string"
            },
            "azureStorageName": {
              "type": "string"
            },
            "azureStorageSubscriptionId": {
              "type": "string"
            },
            "azureStorageResourceGroupName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('accountName'), parameters('projectName'), parameters('cosmosDBName'))]",
              "properties": {
                "category": "CosmosDB",
                "target": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('cosmosDBSubscriptionId'), parameters('cosmosDBResourceGroupName')), 'Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName')), '2024-12-01-preview').documentEndpoint]",
                "authType": "AAD",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('cosmosDBSubscriptionId'), parameters('cosmosDBResourceGroupName')), 'Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName'))]",
                  "location": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('cosmosDBSubscriptionId'), parameters('cosmosDBResourceGroupName')), 'Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName')), '2024-12-01-preview', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('projectName'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('accountName'), parameters('projectName'), parameters('azureStorageName'))]",
              "properties": {
                "category": "AzureStorageAccount",
                "target": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('azureStorageSubscriptionId'), parameters('azureStorageResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('azureStorageName')), '2023-05-01').primaryEndpoints.blob]",
                "authType": "AAD",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('azureStorageSubscriptionId'), parameters('azureStorageResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('azureStorageName'))]",
                  "location": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('azureStorageSubscriptionId'), parameters('azureStorageResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('azureStorageName')), '2023-05-01', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('projectName'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('accountName'), parameters('projectName'), parameters('aiSearchName'))]",
              "properties": {
                "category": "CognitiveSearch",
                "target": "[format('https://{0}.search.windows.net', parameters('aiSearchName'))]",
                "authType": "AAD",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('aiSearchServiceSubscriptionId'), parameters('aiSearchServiceResourceGroupName')), 'Microsoft.Search/searchServices', parameters('aiSearchName'))]",
                  "location": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('aiSearchServiceSubscriptionId'), parameters('aiSearchServiceResourceGroupName')), 'Microsoft.Search/searchServices', parameters('aiSearchName')), '2024-06-01-preview', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('projectName'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', parameters('accountName'), parameters('projectName'))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "description": "[parameters('projectDescription')]",
                "displayName": "[parameters('displayName')]"
              }
            }
          ],
          "outputs": {
            "projectName": {
              "type": "string",
              "value": "[parameters('projectName')]"
            },
            "projectId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('projectName'))]"
            },
            "projectPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('projectName')), '2025-04-01-preview', 'full').identity.principalId]"
            },
            "projectEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('projectName')), '2025-04-01-preview').endpoints['AI Foundry API']]"
            },
            "projectWorkspaceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('projectName')), '2025-04-01-preview').internalId]"
            },
            "cosmosDBConnection": {
              "type": "string",
              "value": "[parameters('cosmosDBName')]"
            },
            "azureStorageConnection": {
              "type": "string",
              "value": "[parameters('azureStorageName')]"
            },
            "aiSearchConnection": {
              "type": "string",
              "value": "[parameters('aiSearchName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('aiProjectFormatWorkspaceId{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "projectWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('aiProject{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.projectWorkspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "2454897475102921474"
            }
          },
          "parameters": {
            "projectWorkspaceId": {
              "type": "string"
            }
          },
          "variables": {
            "part1": "[substring(parameters('projectWorkspaceId'), 0, 8)]",
            "part2": "[substring(parameters('projectWorkspaceId'), 8, 4)]",
            "part3": "[substring(parameters('projectWorkspaceId'), 12, 4)]",
            "part4": "[substring(parameters('projectWorkspaceId'), 16, 4)]",
            "part5": "[substring(parameters('projectWorkspaceId'), 20, 12)]",
            "formattedGuid": "[format('{0}-{1}-{2}-{3}-{4}', variables('part1'), variables('part2'), variables('part3'), variables('part4'), variables('part5'))]"
          },
          "resources": [],
          "outputs": {
            "projectWorkspaceIdGuid": {
              "type": "string",
              "value": "[variables('formattedGuid')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('aiProject{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployAPIM')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('apim{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.apimName.value]"
          },
          "commonTags": {
            "value": "[variables('commonTags')]"
          },
          "publisherEmail": {
            "value": "[parameters('apimPublisherEmail')]"
          },
          "publisherName": {
            "value": "[parameters('adminPublisherName')]"
          },
          "appInsightsName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('law{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.applicationInsightsName.value]"
          },
          "subscriptionName": {
            "value": "[parameters('apimSubscriptionName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "4153478049595037081"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "name": {
              "type": "string"
            },
            "publisherEmail": {
              "type": "string"
            },
            "publisherName": {
              "type": "string"
            },
            "appInsightsName": {
              "type": "string"
            },
            "commonTags": {
              "type": "object",
              "defaultValue": {}
            },
            "subscriptionName": {
              "type": "string"
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Developer",
              "allowedValues": [
                "Consumption",
                "Developer",
                "Basic",
                "Basicv2",
                "Standard",
                "Standardv2",
                "Premium"
              ],
              "metadata": {
                "description": "The pricing tier of this API Management service"
              }
            }
          },
          "variables": {
            "logSettings": {
              "headers": [
                "Content-type",
                "User-agent",
                "x-ms-region",
                "x-ratelimit-remaining-tokens",
                "x-ratelimit-remaining-requests"
              ],
              "body": {
                "bytes": 0
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ApiManagement/service",
              "apiVersion": "2024-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "capacity": 1
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "publisherEmail": "[parameters('publisherEmail')]",
                "publisherName": "[parameters('publisherName')]"
              },
              "tags": "[parameters('commonTags')]"
            },
            {
              "type": "Microsoft.ApiManagement/service/subscriptions",
              "apiVersion": "2023-09-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), parameters('subscriptionName'))]",
              "properties": {
                "allowTracing": true,
                "displayName": "[parameters('subscriptionName')]",
                "scope": "/apis",
                "state": "active"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/loggers",
              "apiVersion": "2023-09-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'logger-appinsights')]",
              "properties": {
                "credentials": {
                  "instrumentationKey": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey]"
                },
                "description": "Logger for Application Insights",
                "isBuffered": false,
                "loggerType": "applicationInsights",
                "resourceId": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.ApiManagement/service/{0}', parameters('name'))]",
              "name": "logToAnalytics",
              "properties": {
                "workspaceId": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').WorkspaceResourceId]",
                "logs": [
                  {
                    "category": "GatewayLogs",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/diagnostics",
              "apiVersion": "2024-06-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'applicationinsights')]",
              "properties": {
                "alwaysLog": "allErrors",
                "httpCorrelationProtocol": "W3C",
                "logClientIp": true,
                "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('name'), 'logger-appinsights')]",
                "metrics": true,
                "verbosity": "verbose",
                "sampling": {
                  "samplingType": "fixed",
                  "percentage": 100
                },
                "frontend": {
                  "request": "[variables('logSettings')]",
                  "response": "[variables('logSettings')]"
                },
                "backend": {
                  "request": "[variables('logSettings')]",
                  "response": "[variables('logSettings')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('name'), 'logger-appinsights')]",
                "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ApiManagement/service', parameters('name')), '2024-05-01', 'full').identity.principalId]"
            },
            "loggerId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('name'), 'logger-appinsights')]"
            },
            "loggerName": {
              "type": "string",
              "value": "logger-appinsights"
            },
            "gatewayUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ApiManagement/service', parameters('name')), '2024-05-01').gatewayUrl]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('law{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployAPIM')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('apimConfig{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "apimName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('apim{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "apimLoggerName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('apim{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.loggerName.value]"
          },
          "cognitiveServicesName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "348302415171810106"
            }
          },
          "parameters": {
            "apimName": {
              "type": "string",
              "defaultValue": ""
            },
            "apimLoggerName": {
              "type": "string",
              "defaultValue": ""
            },
            "cognitiveServicesName": {
              "type": "string",
              "defaultValue": ""
            },
            "deploymentSuffix": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('apim-swagger-api{0}', parameters('deploymentSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "serviceName": {
                    "value": "[parameters('apimName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "6399096538867097995"
                    }
                  },
                  "parameters": {
                    "serviceName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the API Management instance to deploy this API to."
                      }
                    }
                  },
                  "variables": {
                    "openApiSpecSwagger": "openapi: 3.0.1\r\ninfo:\r\n  title: swagger-api\r\n  description: Exposes the OpenAPI spec for an API Endpoint\r\n  version: '1.0'\r\nservers:\r\n  - url: https://apim-55vh-apichat.azure-api.net/docs\r\npaths:\r\n  '/apis/{api-id}':\r\n    get:\r\n      summary: OpenAPI Spec\r\n      description: Returns the OpenAPI specification for a given api-id\r\n      operationId: openapi-spec\r\n      parameters:\r\n        - name: api-id\r\n          in: path\r\n          description: Id of the API inside Azure API Management\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: export\r\n          in: query\r\n          description: Export the API as OpenAPI Spec\r\n          required: true\r\n          schema:\r\n            enum:\r\n              - true\r\n            type: boolean\r\n            default: true\r\n        - name: format\r\n          in: query\r\n          description: The format to export the API in.\r\n          required: true\r\n          schema:\r\n            enum:\r\n              - openapi\r\n            type: string\r\n            default: openapi\r\n        - name: api-version\r\n          in: query\r\n          description: Azure Management REST API version\r\n          schema:\r\n            enum:\r\n              - '2022-08-01'\r\n            type: string\r\n            default: '2022-08-01'\r\n      responses:\r\n        '200':\r\n          description: OpenAPI spec in JSON or YAML format for a given API.\r\n  '/products/{product_id}/apis':\r\n    get:\r\n      summary: Product APIs\r\n      description: Product APIs\r\n      operationId: product-apis\r\n      parameters:\r\n        - name: product_id\r\n          in: path\r\n          description: ID of the Azure API Management Product\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: api-version\r\n          in: query\r\n          description: Azure Management REST API version\r\n          required: true\r\n          schema:\r\n            enum:\r\n              - '2022-08-01'\r\n            type: string\r\n            default: '2022-08-01'\r\n      responses:\r\n        '200':\r\n          description: ''\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/product-apis-response'\r\n              example:\r\n                value:\r\n                  - id: string\r\n                    type: string\r\n                    name: string\r\n                    properties:\r\n                      displayName: string\r\n                      apiRevision: string\r\n                      description: { }\r\n                      subscriptionRequired: true\r\n                      serviceUrl: string\r\n                      backendId: { }\r\n                      path: string\r\n                      protocols:\r\n                        - string\r\n                      authenticationSettings: { }\r\n                      subscriptionKeyParameterNames: { }\r\n                      isCurrent: true\r\n                count: 0\r\n  '/namedValues/{named-value-id}':\r\n    get:\r\n      summary: Named Values\r\n      description: Returns the value for a named value in API Management.\r\n      operationId: named-values\r\n      parameters:\r\n        - name: named-value-id\r\n          in: path\r\n          description: Id of the named value in API Management\r\n          required: true\r\n          schema:\r\n            type: string\r\n        - name: api-version\r\n          in: query\r\n          description: Version of Azure Management REST API\r\n          schema:\r\n            enum:\r\n              - '2022-08-01'\r\n            type: string\r\n            default: '2022-08-01'\r\n      responses:\r\n        '200':\r\n          description: ''\r\n  /products:\r\n    get:\r\n      summary: Products\r\n      operationId: products\r\n      parameters:\r\n        - name: api-version\r\n          in: query\r\n          description: Version of Azure Management Rest API Endpoint\r\n          required: true\r\n          schema:\r\n            enum:\r\n              - '2022-08-01'\r\n            type: string\r\n            default: '2022-08-01'\r\n        - name: $filter\r\n          in: query\r\n          description: 'Odata filter. (i.e. contains(name,''agent'')'\r\n          required: true\r\n          schema:\r\n            enum:\r\n              - 'contains(name,''agent'')'\r\n            type: string\r\n            default: 'contains(name,''agent'')'\r\n      responses:\r\n        '200':\r\n          description: ''\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/apim-products-response'\r\n              example:\r\n                value:\r\n                  - id: /subscriptions/7541bc3d-10b0-4ed6-a6cd-52daf5eb8719/resourceGroups/apichat-rg/providers/Microsoft.ApiManagement/service/apim-55vh-apichat/products/generic-chat-agent\r\n                    type: Microsoft.ApiManagement/service/products\r\n                    name: generic-chat-agent\r\n                    properties:\r\n                      displayName: Generic Chat Agent\r\n                      description: This product has all available APIs enabled for the Chat Agent\r\n                      terms: API Chat Product Terms\r\n                      subscriptionRequired: true\r\n                      approvalRequired: false\r\n                      subscriptionsLimit: 1\r\n                      state: published\r\n                count: 1\r\ncomponents:\r\n  schemas:\r\n    product-apis-response:\r\n      type: object\r\n      properties:\r\n        value:\r\n          type: array\r\n          items:\r\n            required:\r\n              - id\r\n              - type\r\n              - name\r\n              - properties\r\n            type: object\r\n            properties:\r\n              id:\r\n                type: string\r\n              type:\r\n                type: string\r\n              name:\r\n                type: string\r\n              properties:\r\n                type: object\r\n                properties:\r\n                  displayName:\r\n                    type: string\r\n                  apiRevision:\r\n                    type: string\r\n                  description: { }\r\n                  subscriptionRequired:\r\n                    type: boolean\r\n                  serviceUrl:\r\n                    type: string\r\n                  backendId: { }\r\n                  path:\r\n                    type: string\r\n                  protocols:\r\n                    type: array\r\n                    items:\r\n                      type: string\r\n                  authenticationSettings: { }\r\n                  subscriptionKeyParameterNames: { }\r\n                  isCurrent:\r\n                    type: boolean\r\n        count:\r\n          type: integer\r\n    apim-products-response:\r\n      type: object\r\n      properties:\r\n        value:\r\n          type: array\r\n          items:\r\n            required:\r\n              - id\r\n              - type\r\n              - name\r\n              - properties\r\n            type: object\r\n            properties:\r\n              id:\r\n                type: string\r\n              type:\r\n                type: string\r\n              name:\r\n                type: string\r\n              properties:\r\n                type: object\r\n                properties:\r\n                  displayName:\r\n                    type: string\r\n                  description:\r\n                    type: string\r\n                  terms:\r\n                    type: string\r\n                  subscriptionRequired:\r\n                    type: boolean\r\n                  approvalRequired:\r\n                    type: boolean\r\n                  subscriptionsLimit:\r\n                    type: integer\r\n                  state:\r\n                    type: string\r\n        count:\r\n          type: integer\r\n  securitySchemes:\r\n    apiKeyHeader:\r\n      type: apiKey\r\n      name: Ocp-Apim-Subscription-Key\r\n      in: header\r\n    apiKeyQuery:\r\n      type: apiKey\r\n      name: subscription-key\r\n      in: query\r\nsecurity:\r\n  - apiKeyHeader: [ ]\r\n  - apiKeyQuery: [ ]",
                    "policy1": "<policies>\r\n    <inbound>\r\n        <base />\r\n        <set-backend-service base-url=\"{{APIM-Management-Service-URL}}\" />\r\n        <authentication-managed-identity resource=\"${environment().resourceManager}/\" />\r\n        <cache-lookup vary-by-developer=\"true\" vary-by-developer-groups=\"true\" allow-private-response-caching=\"true\" must-revalidate=\"true\" downstream-caching-type=\"none\" />\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <base />\r\n        <cache-store duration=\"30\" cache-response=\"true\" />\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>\r\n    "
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ApiManagement/service/apis",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}', parameters('serviceName'), 'swagger-api')]",
                      "properties": {
                        "path": "docs",
                        "description": "OpenAPI specs and utility APIs for Azure Management Rest API operations",
                        "displayName": "swagger-api",
                        "format": "openapi",
                        "value": "[variables('openApiSpecSwagger')]",
                        "subscriptionRequired": true,
                        "type": "http",
                        "protocols": [
                          "https"
                        ],
                        "serviceUrl": "[format('{0}/docs', reference(resourceId('Microsoft.ApiManagement/service', parameters('serviceName')), '2023-09-01-preview').gatewayUrl)]"
                      }
                    },
                    {
                      "type": "Microsoft.ApiManagement/service/apis/policies",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}/{2}', parameters('serviceName'), 'swagger-api', 'policy')]",
                      "properties": {
                        "format": "rawxml",
                        "value": "[variables('policy1')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('serviceName'), 'swagger-api')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "named-value-apim-service-url",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "apiManagementServiceName": {
                            "value": "[parameters('serviceName')]"
                          },
                          "name": {
                            "value": "apim-management-service-url"
                          },
                          "displayName": {
                            "value": "APIM-Management-Service-URL"
                          },
                          "value": {
                            "value": "[format('{0}/subscriptions/{1}/resourceGroups/{2}/providers/Microsoft.ApiManagement/service/{3}', environment().resourceManager, subscription().subscriptionId, resourceGroup().name, parameters('serviceName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "3523468763243758174"
                            }
                          },
                          "parameters": {
                            "apiManagementServiceName": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            },
                            "secret": {
                              "type": "bool",
                              "defaultValue": false
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ApiManagement/service/namedValues",
                              "apiVersion": "2024-06-01-preview",
                              "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
                              "properties": {
                                "displayName": "[parameters('displayName')]",
                                "value": "[parameters('value')]",
                                "tags": [],
                                "secret": "[parameters('secret')]"
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ApiManagement/service/namedValues', parameters('apiManagementServiceName'), parameters('name'))]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/apis', parameters('serviceName'), 'swagger-api')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('apim-openai-backends{0}', parameters('deploymentSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apimName": {
                    "value": "[parameters('apimName')]"
                  },
                  "backendPoolName": {
                    "value": "openaibackendpool"
                  },
                  "backendNames": {
                    "value": [
                      "[parameters('cognitiveServicesName')]"
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17788986361713825781"
                    }
                  },
                  "parameters": {
                    "apimName": {
                      "type": "string"
                    },
                    "backendNames": {
                      "type": "array"
                    },
                    "backendPoolName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "backends",
                        "count": "[length(parameters('backendNames'))]"
                      },
                      "type": "Microsoft.ApiManagement/service/backends",
                      "apiVersion": "2024-06-01-preview",
                      "name": "[format('{0}/{1}', parameters('apimName'), parameters('backendNames')[copyIndex()])]",
                      "properties": {
                        "url": "[format('https://{0}.openai.azure.com/openai', parameters('backendNames')[copyIndex()])]",
                        "protocol": "http",
                        "description": "[format('Backend for {0}', parameters('backendNames')[copyIndex()])]",
                        "type": "Single",
                        "circuitBreaker": {
                          "rules": [
                            {
                              "acceptRetryAfter": true,
                              "failureCondition": {
                                "count": 1,
                                "interval": "PT10S",
                                "statusCodeRanges": [
                                  {
                                    "min": 429,
                                    "max": 429
                                  },
                                  {
                                    "min": 500,
                                    "max": 503
                                  }
                                ]
                              },
                              "name": "[format('{0}BreakerRule', parameters('backendNames')[copyIndex()])]",
                              "tripDuration": "PT10S"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.ApiManagement/service/backends",
                      "apiVersion": "2024-06-01-preview",
                      "name": "[format('{0}/{1}', parameters('apimName'), parameters('backendPoolName'))]",
                      "properties": {
                        "url": "[format('https://{0}.openai.azure.com/openai', parameters('backendPoolName'))]",
                        "protocol": "http",
                        "description": "Load balance multiple openai instances",
                        "type": "Pool",
                        "pool": {
                          "copy": [
                            {
                              "name": "services",
                              "count": "[length(parameters('backendNames'))]",
                              "input": {
                                "id": "[format('/backends/{0}', parameters('backendNames')[copyIndex('services')])]",
                                "priority": 1,
                                "weight": 1
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "backends"
                      ]
                    }
                  ],
                  "outputs": {
                    "backendPoolName": {
                      "type": "string",
                      "value": "[parameters('backendPoolName')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('apim-namedvalue-openai-pool{0}', parameters('deploymentSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "apiManagementServiceName": {
                    "value": "[parameters('apimName')]"
                  },
                  "name": {
                    "value": "openai-backend-pool"
                  },
                  "displayName": {
                    "value": "OpenAI-Backend-Pool"
                  },
                  "value": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('apim-openai-backends{0}', parameters('deploymentSuffix'))), '2022-09-01').outputs.backendPoolName.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "3523468763243758174"
                    }
                  },
                  "parameters": {
                    "apiManagementServiceName": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "displayName": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "secret": {
                      "type": "bool",
                      "defaultValue": false
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ApiManagement/service/namedValues",
                      "apiVersion": "2024-06-01-preview",
                      "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
                      "properties": {
                        "displayName": "[parameters('displayName')]",
                        "value": "[parameters('value')]",
                        "tags": [],
                        "secret": "[parameters('secret')]"
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/namedValues', parameters('apiManagementServiceName'), parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('apim-openai-backends{0}', parameters('deploymentSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('apim-namedvalue-openai-non-load-balanced-pool{0}', parameters('deploymentSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "non-load-balanced-openai-backend-name"
                  },
                  "apiManagementServiceName": {
                    "value": "[parameters('apimName')]"
                  },
                  "displayName": {
                    "value": "non-load-balanced-openai-backend-name"
                  },
                  "value": {
                    "value": "[parameters('cognitiveServicesName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "3523468763243758174"
                    }
                  },
                  "parameters": {
                    "apiManagementServiceName": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "displayName": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "secret": {
                      "type": "bool",
                      "defaultValue": false
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ApiManagement/service/namedValues",
                      "apiVersion": "2024-06-01-preview",
                      "name": "[format('{0}/{1}', parameters('apiManagementServiceName'), parameters('name'))]",
                      "properties": {
                        "displayName": "[parameters('displayName')]",
                        "value": "[parameters('value')]",
                        "tags": [],
                        "secret": "[parameters('secret')]"
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/namedValues', parameters('apiManagementServiceName'), parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('apim-openai-api{0}', parameters('deploymentSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "serviceName": {
                    "value": "[parameters('apimName')]"
                  },
                  "apimLoggerName": {
                    "value": "[parameters('apimLoggerName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "5710250655216345939"
                    }
                  },
                  "parameters": {
                    "serviceName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the API Management instance to deploy this API to."
                      }
                    },
                    "apimLoggerName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "openApiSpecUrl": "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/refs/heads/main/specification/cognitiveservices/data-plane/AzureOpenAI/inference/preview/2024-12-01-preview/inference.json",
                    "policy1": "    <policies>\r\n      <inbound>\r\n        <base />\r\n      <choose>\r\n          <!-- If we are calling the Assistants API, we can't load balance since all of the Assistant objects are scoped to a single instance of OpenAI-->\r\n          <when condition=\"@(context.Request.Url.Path.Contains(\"assistants\") || context.Request.Url.Path.Contains(\"threads\"))\">\r\n              <set-backend-service backend-id=\"{{non-load-balanced-openai-backend-name}}\" />\r\n          </when>\r\n          <otherwise>\r\n              <set-backend-service backend-id=\"{{OpenAI-Backend-Pool}}\" />\r\n          </otherwise>\r\n      </choose> \r\n      <authentication-managed-identity resource=\"https://cognitiveservices.azure.com\" output-token-variable-name=\"managed-id-access-token\" ignore-error=\"false\" />\r\n      <set-header name=\"Authorization\" exists-action=\"override\">\r\n          <value>@(\"Bearer \" + (string)context.Variables[\"managed-id-access-token\"])</value>\r\n      </set-header>\r\n      <!-- <azure-openai-token-limit counter-key=\"@(context.Subscription.Id)\" tokens-per-minute=\"150000\" estimate-prompt-tokens=\"true\" tokens-consumed-header-name=\"x-request-tokens-consumed\" tokens-consumed-variable-name=\"tokensConsumed\" remaining-tokens-variable-name=\"remainingTokens\" /> -->\r\n      <azure-openai-emit-token-metric namespace=\"openai\">\r\n            <dimension name=\"Subscription ID\" value=\"@(context.Subscription.Id)\" />\r\n            <dimension name=\"Client IP\" value=\"@(context.Request.IpAddress)\" />\r\n            <dimension name=\"API ID\" value=\"@(context.Api.Id)\" />\r\n            <dimension name=\"User ID\" value=\"@(context.Request.Headers.GetValueOrDefault(\"x-user-id\", \"N/A\"))\" />\r\n        </azure-openai-emit-token-metric>\r\n      </inbound>\r\n      <backend>\r\n        <!--Set count to one less than the number of backends in the pool to try all backends until the backend pool is temporarily unavailable.-->\r\n        <retry count=\"2\" interval=\"0\" first-fast-retry=\"true\" condition=\"@(context.Response.StatusCode == 429 || (context.Response.StatusCode == 503 && !context.Response.StatusReason.Contains(\"Backend pool\") && !context.Response.StatusReason.Contains(\"is temporarily unavailable\")))\">\r\n            <forward-request buffer-request-body=\"true\" />\r\n        </retry>\r\n      </backend>\r\n      <outbound>\r\n        <base />\r\n        <emit-metric name=\"LLMCall\" value=\"1\" namespace=\"openai\">\r\n            <dimension name=\"API ID\" />\r\n            <dimension name=\"llm-backend\" value=\"@(context.Request.Url.Scheme + \"://\" + context.Request.Url.Host + context.Api.Path)\" />\r\n            <dimension name=\"llm-region\" value=\"@(context.Response.Headers.GetValueOrDefault(\"x-ms-region\", \"\"))\" />\r\n        </emit-metric>\r\n        <set-header name=\"x-backend\" exists-action=\"override\">\r\n            <value>@(context.Request.Url.Scheme + \"://\" + context.Request.Url.Host + context.Api.Path)</value>\r\n        </set-header>\r\n      </outbound>\r\n      <on-error>\r\n        <base />\r\n      </on-error>\r\n    </policies>\r\n    ",
                    "logSettings": {
                      "headers": [
                        "Content-type",
                        "User-agent",
                        "x-ms-region",
                        "x-ratelimit-remaining-tokens",
                        "x-ratelimit-remaining-requests"
                      ],
                      "body": {
                        "bytes": 8192
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ApiManagement/service/apis",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}', parameters('serviceName'), 'azure-openai')]",
                      "properties": {
                        "path": "openai",
                        "description": "See https://raw.githubusercontent.com/Azure/azure-rest-api-specs/refs/heads/main/specification/cognitiveservices/data-plane/AzureOpenAI/inference/preview/2024-12-01-preview/inference.json",
                        "displayName": "azure-openai",
                        "format": "openapi-link",
                        "value": "[variables('openApiSpecUrl')]",
                        "subscriptionRequired": true,
                        "type": "http",
                        "protocols": [
                          "https"
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.ApiManagement/service/apis/policies",
                      "apiVersion": "2023-09-01-preview",
                      "name": "[format('{0}/{1}/{2}', parameters('serviceName'), 'azure-openai', 'policy')]",
                      "properties": {
                        "format": "rawxml",
                        "value": "[variables('policy1')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('serviceName'), 'azure-openai')]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('apimLoggerName')))]",
                      "type": "Microsoft.ApiManagement/service/apis/diagnostics",
                      "apiVersion": "2022-08-01",
                      "name": "[format('{0}/{1}/{2}', parameters('serviceName'), 'azure-openai', 'applicationinsights')]",
                      "properties": {
                        "alwaysLog": "allErrors",
                        "httpCorrelationProtocol": "W3C",
                        "logClientIp": true,
                        "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('serviceName'), parameters('apimLoggerName'))]",
                        "metrics": true,
                        "verbosity": "verbose",
                        "sampling": {
                          "samplingType": "fixed",
                          "percentage": 100
                        },
                        "frontend": {
                          "request": "[variables('logSettings')]",
                          "response": "[variables('logSettings')]"
                        },
                        "backend": {
                          "request": "[variables('logSettings')]",
                          "response": "[variables('logSettings')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('serviceName'), 'azure-openai')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ApiManagement/service/apis', parameters('serviceName'), 'azure-openai')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('apim-namedvalue-openai-non-load-balanced-pool{0}', parameters('deploymentSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('apim-namedvalue-openai-pool{0}', parameters('deploymentSuffix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('apim{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "condition": "[and(parameters('deployAPIM'), parameters('addRoleAssignments'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('apim-roles{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "identityPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('aiFoundryProject{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.principalId.value]"
          },
          "principalType": {
            "value": "ServicePrincipal"
          },
          "apimName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('apim{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7244741543290095711"
            }
          },
          "parameters": {
            "identityPrincipalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "ServicePrincipal",
                "User"
              ]
            },
            "registryName": {
              "type": "string",
              "defaultValue": ""
            },
            "storageAccountName": {
              "type": "string",
              "defaultValue": ""
            },
            "aiSearchName": {
              "type": "string",
              "defaultValue": ""
            },
            "aiServicesName": {
              "type": "string",
              "defaultValue": ""
            },
            "cosmosName": {
              "type": "string",
              "defaultValue": ""
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": ""
            },
            "apimName": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "$fxv#0": {
              "source": {
                "url": "https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles"
              },
              "cosmos": {
                "dataContributorRoleId": "00000000-0000-0000-0000-000000000002"
              },
              "storage": {
                "blobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                "blobDataOwnerRoleId": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                "storageAccountContributorRoleId": "17d1049b-9a84-46fb-8f53-869881c3d3ab",
                "queueDataContributorRoleId": "974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                "tableContributorRoleId": "0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                "storageQueueDataMessageSender": "c6a89b2d-59bc-44d0-9896-0f6e12d7b80a"
              },
              "search": {
                "indexDataContributorRoleId": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                "indexDataReaderRoleId": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
                "serviceContributorRoleId": "7ca78c08-252a-4471-8644-bb5ff32d4ba0"
              },
              "openai": {
                "cognitiveServicesOpenAIContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
                "cognitiveServicesOpenAIUserRoleId": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd",
                "cognitiveServicesUserRoleId": "a97b65f3-24c7-4388-baec-2e87135dc908",
                "cognitiveServicesContributorRoleId": "25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                "cognitiveServicesAzureAIEngineerRoleId": "64702f94-c441-49e6-a78b-ef80e0188fee"
              },
              "ml": {
                "dataScientistRole": "f6c7c914-8db3-469d-8ca1-694a8f32e121"
              },
              "containerregistry": {
                "acrPullRoleId": "7f951dda-4ed3-4680-a7ca-43fe172d538d"
              },
              "keyvault": {
                "secretsUserRoleId": "4633458b-17de-408a-b874-0445c86b69e6",
                "secretsOfficerRoleId": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7"
              },
              "apim": {
                "serviceReaderRoleId": "71522526-b88f-4d52-b57f-d31fc3546d0d"
              }
            },
            "roleDefinitions": "[variables('$fxv#0')]",
            "addRegistryRoles": "[not(empty(parameters('registryName')))]",
            "addStorageRoles": "[not(empty(parameters('storageAccountName')))]",
            "addSearchRoles": "[not(empty(parameters('aiSearchName')))]",
            "addCogServicesRoles": "[not(empty(parameters('aiServicesName')))]",
            "addCosmosRoles": "[not(empty(parameters('cosmosName')))]",
            "addKeyVaultRoles": "[not(empty(parameters('keyVaultName')))]",
            "addApimRoles": "[not(empty(parameters('apimName')))]"
          },
          "resources": [
            {
              "condition": "[variables('addRegistryRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('registryName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), parameters('identityPrincipalId'), variables('roleDefinitions').containerregistry.acrPullRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').containerregistry.acrPullRoleId)]",
                "description": "[format('Permission for {0} {1} to pull images from the registry {2}', parameters('principalType'), parameters('identityPrincipalId'), parameters('registryName'))]"
              }
            },
            {
              "condition": "[variables('addStorageRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.blobDataContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').storage.blobDataContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to write to the storage account {2} Blob', parameters('principalType'), parameters('identityPrincipalId'), parameters('storageAccountName'))]"
              }
            },
            {
              "condition": "[variables('addStorageRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.tableContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').storage.tableContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to write to the storage account {2} Table', parameters('principalType'), parameters('identityPrincipalId'), parameters('storageAccountName'))]"
              }
            },
            {
              "condition": "[variables('addStorageRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.queueDataContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').storage.queueDataContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to write to the storage account {2} Queue', parameters('principalType'), parameters('identityPrincipalId'), parameters('storageAccountName'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIUserRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesOpenAIUserRoleId)]",
                "description": "[format('Permission for {0} {1} to be OpenAI User', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesOpenAIContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to be OpenAI Contributor', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesUserRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesUserRoleId)]",
                "description": "[format('Permission for {0} {1} to be a Cognitive Services User', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesContributorRoleId)]",
                "description": "[format('Permission for {0} {1} to be a Cognitive Services Contributor', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCogServicesRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesAzureAIEngineerRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').openai.cognitiveServicesAzureAIEngineerRoleId)]",
                "description": "[format('Permission for {0} {1} to be a Cognitive Services Azure AI Engineer', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addSearchRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').search.indexDataContributorRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to use the modify search service indexes', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addSearchRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataReaderRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').search.indexDataReaderRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to use the read search service indexes', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addSearchRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.serviceContributorRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').search.serviceContributorRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to be a search service contributor', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addCosmosRoles')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2024-08-15",
              "name": "[format('{0}/{1}', parameters('cosmosName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), parameters('identityPrincipalId'), variables('roleDefinitions').cosmos.dataContributorRoleId))]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[format('{0}/providers/Microsoft.DocumentDB/databaseAccounts/{1}/sqlRoleDefinitions/{2}', resourceGroup().id, parameters('cosmosName'), variables('roleDefinitions').cosmos.dataContributorRoleId)]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName'))]"
              }
            },
            {
              "condition": "[variables('addKeyVaultRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('identityPrincipalId'), variables('roleDefinitions').keyvault.secretsOfficerRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').keyvault.secretsOfficerRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to be a Key Vault Secrets Officer', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            },
            {
              "condition": "[variables('addApimRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ApiManagement/service/{0}', parameters('apimName'))]",
              "name": "[guid(resourceId('Microsoft.ApiManagement/service', parameters('apimName')), parameters('identityPrincipalId'), variables('roleDefinitions').apim.serviceReaderRoleId)]",
              "properties": {
                "principalId": "[parameters('identityPrincipalId')]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitions').apim.serviceReaderRoleId)]",
                "principalType": "[parameters('principalType')]",
                "description": "[format('Permission for {0} {1} to be a APIM Service Reader', parameters('principalType'), parameters('identityPrincipalId'))]"
              }
            }
          ],
          "outputs": {
            "containerRegistryRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addRegistryRoles'), createObject('registry_AcrPull_RoleId', extensionResourceId(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), parameters('identityPrincipalId'), variables('roleDefinitions').containerregistry.acrPullRoleId))), createObject())]"
            },
            "storageRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addStorageRoles'), createObject('storage_BlobContributor_RoleId', extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.blobDataContributorRoleId)), 'storage_TableContributor_RoleId', extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.tableContributorRoleId)), 'storage_QueueContributor_RoleId', extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('identityPrincipalId'), variables('roleDefinitions').storage.queueDataContributorRoleId))), createObject())]"
            },
            "cognitiveServicesRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addCogServicesRoles'), createObject('cognitiveServices_OpenAIUser_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIUserRoleId)), 'cognitiveServices_OpenAIContributor_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesOpenAIContributorRoleId)), 'cognitiveServices_User_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesUserRoleId)), 'cognitiveServices_Contributor_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesContributorRoleId)), 'cognitiveServices_AzureAIEngineer_RoleId', extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('identityPrincipalId'), variables('roleDefinitions').openai.cognitiveServicesAzureAIEngineerRoleId))), createObject())]"
            },
            "searchServiceRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addSearchRoles'), createObject('search_IndexDataContributor_RoleId', extensionResourceId(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataContributorRoleId)), 'search_IndexDataReader_RoleId', extensionResourceId(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.indexDataReaderRoleId)), 'search_ServiceContributor_RoleId', extensionResourceId(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('identityPrincipalId'), variables('roleDefinitions').search.serviceContributorRoleId))), createObject())]"
            },
            "cosmosRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addCosmosRoles'), createObject('cosmos_UserAccess_RoleId', resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments', parameters('cosmosName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), parameters('identityPrincipalId'), variables('roleDefinitions').cosmos.dataContributorRoleId))), createObject())]"
            },
            "keyVaultRoleAssignmentIds": {
              "type": "object",
              "value": "[if(variables('addKeyVaultRoles'), createObject('keyVault_SecretsOfficer_RoleId', extensionResourceId(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('identityPrincipalId'), variables('roleDefinitions').keyvault.secretsOfficerRoleId))), createObject())]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('aiFoundryProject{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('apim{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('caenv{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "newEnvironmentName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.caManagedEnvName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('law{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceName.value]"
          },
          "logAnalyticsRgName": {
            "value": "[variables('resourceGroupName')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "publicAccessEnabled": {
            "value": "[parameters('publicAccessEnabled')]"
          },
          "containerAppEnvironmentWorkloadProfiles": {
            "value": "[parameters('containerAppEnvironmentWorkloadProfiles')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "433586549168325682"
            }
          },
          "parameters": {
            "newEnvironmentName": {
              "type": "string",
              "defaultValue": ""
            },
            "existingEnvironmentName": {
              "type": "string",
              "defaultValue": ""
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "logAnalyticsWorkspaceName": {
              "type": "string"
            },
            "logAnalyticsRgName": {
              "type": "string"
            },
            "appSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "publicAccessEnabled": {
              "type": "bool",
              "defaultValue": true
            },
            "containerAppEnvironmentWorkloadProfiles": {
              "type": "array"
            }
          },
          "variables": {
            "useExistingEnvironment": "[not(empty(parameters('existingEnvironmentName')))]",
            "cleanAppEnvName": "[replace(parameters('newEnvironmentName'), '_', '-')]",
            "resourceGroupName": "[resourceGroup().name]"
          },
          "resources": [
            {
              "condition": "[not(variables('useExistingEnvironment'))]",
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2024-03-01",
              "name": "[variables('cleanAppEnvName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "appLogsConfiguration": {
                  "destination": "log-analytics",
                  "logAnalyticsConfiguration": {
                    "customerId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logAnalyticsRgName')), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2023-09-01').customerId]",
                    "sharedKey": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logAnalyticsRgName')), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2023-09-01').primarySharedKey]"
                  }
                },
                "vnetConfiguration": "[if(not(empty(parameters('appSubnetId'))), createObject('infrastructureSubnetId', parameters('appSubnetId'), 'internal', not(parameters('publicAccessEnabled'))), createObject())]",
                "workloadProfiles": "[parameters('containerAppEnvironmentWorkloadProfiles')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(variables('useExistingEnvironment'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.App/managedEnvironments', parameters('existingEnvironmentName')), resourceId('Microsoft.App/managedEnvironments', variables('cleanAppEnvName')))]"
            },
            "name": {
              "type": "string",
              "value": "[if(variables('useExistingEnvironment'), parameters('existingEnvironmentName'), variables('cleanAppEnvName'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[variables('resourceGroupName')]"
            },
            "defaultDomain": {
              "type": "string",
              "value": "[if(variables('useExistingEnvironment'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.App/managedEnvironments', parameters('existingEnvironmentName')), '2024-03-01').defaultDomain, reference(resourceId('Microsoft.App/managedEnvironments', variables('cleanAppEnvName')), '2024-03-01').defaultDomain)]"
            },
            "staticIp": {
              "type": "string",
              "value": "[if(variables('useExistingEnvironment'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.App/managedEnvironments', parameters('existingEnvironmentName')), '2024-03-01').staticIp, reference(resourceId('Microsoft.App/managedEnvironments', variables('cleanAppEnvName')), '2024-03-01').staticIp)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('law{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployAPIApp')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ca-api-stub{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.containerAppAPIName.value]"
          },
          "managedEnvironmentName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('caenv{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "managedEnvironmentRg": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('caenv{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.resourceGroupName.value]"
          },
          "workloadProfileName": {
            "value": "[parameters('appContainerAppEnvironmentWorkloadProfileName')]"
          },
          "registryName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.ACR_Name.value]"
          },
          "targetPort": {
            "value": "[variables('apiTargetPort')]"
          },
          "userAssignedIdentityName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.managedIdentityName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "imageName": {
            "value": "[parameters('apiImageName')]"
          },
          "tags": {
            "value": "[union(variables('tags'), createObject('azd-service-name', 'api'))]"
          },
          "deploymentSuffix": {
            "value": "[variables('deploymentSuffix')]"
          },
          "secrets": {
            "value": {
              "cosmos": "[reference(resourceId('Microsoft.Resources/deployments', format('secret-cosmos{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretUri.value]",
              "aikey": "[reference(resourceId('Microsoft.Resources/deployments', format('secret-openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretUri.value]",
              "docintellikey": "[reference(resourceId('Microsoft.Resources/deployments', format('secret-doc-intelligence{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretUri.value]",
              "searchkey": "[reference(resourceId('Microsoft.Resources/deployments', format('secret-search{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretUri.value]",
              "apikey": "[reference(resourceId('Microsoft.Resources/deployments', format('secret-api-key{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretUri.value]"
            }
          },
          "env": {
            "value": [
              {
                "name": "AnalysisApiEndpoint",
                "value": "[format('https://{0}.{1}', reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.containerAppAPIName.value, reference(resourceId('Microsoft.Resources/deployments', format('caenv{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.defaultDomain.value)]"
              },
              {
                "name": "AnalysisApiKey",
                "secretRef": "apikey"
              },
              {
                "name": "AOAIStandardServiceEndpoint",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.endpoint.value]"
              },
              {
                "name": "AOAIStandardChatGptDeployment",
                "value": "gpt-4o"
              },
              {
                "name": "ApiKey",
                "secretRef": "apikey"
              },
              {
                "name": "PORT",
                "value": "[format('{0}', variables('apiTargetPort'))]"
              },
              {
                "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', format('law{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.appInsightsConnectionString.value]"
              },
              {
                "name": "AZURE_CLIENT_ID",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.managedIdentityClientId.value]"
              },
              {
                "name": "AzureDocumentIntelligenceEndpoint",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.endpoint.value]"
              },
              {
                "name": "AzureAISearchEndpoint",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.endpoint.value]"
              },
              {
                "name": "ContentStorageContainer",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.containerNames.value[0].name]"
              },
              {
                "name": "CosmosDbEndpoint",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.endpoint.value]"
              },
              {
                "name": "StorageAccountName",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "11727283342108817270"
            }
          },
          "parameters": {
            "appName": {
              "type": "string",
              "maxLength": 32
            },
            "managedEnvironmentName": {
              "type": "string"
            },
            "managedEnvironmentRg": {
              "type": "string"
            },
            "imageName": {
              "type": "string",
              "defaultValue": ""
            },
            "registryName": {
              "type": "string"
            },
            "userAssignedIdentityName": {
              "type": "string"
            },
            "workloadProfileName": {
              "type": "string"
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 80,
              "metadata": {
                "description": "The target port for the container"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "deploymentSuffix": {
              "type": "string",
              "defaultValue": ""
            },
            "secrets": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "The secrets required for the container, with the key being the secret name and the value being the key vault URL"
              }
            },
            "env": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The environment variables for the container"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2024-03-01",
              "name": "[parameters('appName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                }
              },
              "properties": {
                "managedEnvironmentId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managedEnvironmentRg')), 'Microsoft.App/managedEnvironments', parameters('managedEnvironmentName'))]",
                "configuration": {
                  "copy": [
                    {
                      "name": "secrets",
                      "count": "[length(items(parameters('secrets')))]",
                      "input": {
                        "name": "[items(parameters('secrets'))[copyIndex('secrets')].key]",
                        "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]",
                        "keyVaultUrl": "[items(parameters('secrets'))[copyIndex('secrets')].value]"
                      }
                    }
                  ],
                  "ingress": {
                    "external": true,
                    "targetPort": "[parameters('targetPort')]",
                    "transport": "auto"
                  },
                  "registries": [
                    {
                      "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]",
                      "server": "[format('{0}.azurecr.io', parameters('registryName'))]"
                    }
                  ]
                },
                "template": {
                  "containers": [
                    {
                      "name": "[parameters('workloadProfileName')]",
                      "image": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference(resourceId('Microsoft.Resources/deployments', format('app-fetch-image-{0}{1}', parameters('appName'), parameters('deploymentSuffix'))), '2022-09-01').outputs, 'containers'), 'value'), 0), 'image'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                      "env": "[parameters('env')]",
                      "resources": {
                        "cpu": "[json('0.5')]",
                        "memory": "1.0Gi"
                      },
                      "probes": [
                        {
                          "type": "Liveness",
                          "httpGet": {
                            "path": "/healthz/live",
                            "port": "[parameters('targetPort')]"
                          }
                        },
                        {
                          "type": "Readiness",
                          "httpGet": {
                            "path": "/healthz/ready",
                            "port": "[parameters('targetPort')]"
                          }
                        },
                        {
                          "type": "Startup",
                          "httpGet": {
                            "path": "/healthz/startup",
                            "port": "[parameters('targetPort')]"
                          }
                        }
                      ]
                    }
                  ],
                  "scale": {
                    "minReplicas": 1,
                    "maxReplicas": 10
                  }
                },
                "workloadProfileName": "[parameters('workloadProfileName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('app-fetch-image-{0}{1}', parameters('appName'), parameters('deploymentSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('app-fetch-image-{0}{1}', parameters('appName'), parameters('deploymentSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "exists": {
                    "value": false
                  },
                  "name": {
                    "value": "[parameters('imageName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "3040635763803770475"
                    }
                  },
                  "parameters": {
                    "exists": {
                      "type": "bool"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "containers": {
                      "type": "array",
                      "value": "[if(parameters('exists'), reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-02-preview').template.containers, createArray())]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/containerApps', parameters('appName'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('appName')]"
            },
            "fqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('appName')), '2024-03-01').configuration.ingress.fqdn]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('secret-api-key{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('containerregistry{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('secret-cosmos{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('doc-intelligence{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('secret-doc-intelligence{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('law{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('caenv{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('secret-openai{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('secret-search{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployBatchApp')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ca-batch-stub{0}', variables('deploymentSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.containerAppBatchName.value]"
          },
          "managedEnvironmentName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('caenv{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "managedEnvironmentRg": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('caenv{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.resourceGroupName.value]"
          },
          "workloadProfileName": {
            "value": "[parameters('appContainerAppEnvironmentWorkloadProfileName')]"
          },
          "registryName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.ACR_Name.value]"
          },
          "targetPort": {
            "value": "[variables('batchTargetPort')]"
          },
          "userAssignedIdentityName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.managedIdentityName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "imageName": {
            "value": "[parameters('batchImageName')]"
          },
          "tags": {
            "value": "[union(variables('tags'), createObject('azd-service-name', 'batch'))]"
          },
          "deploymentSuffix": {
            "value": "[variables('deploymentSuffix')]"
          },
          "secrets": {
            "value": {
              "cosmos": "[reference(resourceId('Microsoft.Resources/deployments', format('secret-cosmos{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretUri.value]",
              "aikey": "[reference(resourceId('Microsoft.Resources/deployments', format('secret-openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretUri.value]",
              "docintellikey": "[reference(resourceId('Microsoft.Resources/deployments', format('secret-doc-intelligence{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretUri.value]",
              "searchkey": "[reference(resourceId('Microsoft.Resources/deployments', format('secret-search{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretUri.value]",
              "apikey": "[reference(resourceId('Microsoft.Resources/deployments', format('secret-api-key{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.secretUri.value]"
            }
          },
          "env": {
            "value": "[union(createArray(createObject('name', 'AnalysisApiEndpoint', 'value', format('https://{0}.{1}', reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.containerAppAPIName.value, reference(resourceId('Microsoft.Resources/deployments', format('caenv{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.defaultDomain.value)), createObject('name', 'AnalysisApiKey', 'secretRef', 'apikey'), createObject('name', 'AOAIStandardServiceEndpoint', 'value', reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.endpoint.value), createObject('name', 'AOAIStandardChatGptDeployment', 'value', 'gpt-4o'), createObject('name', 'ApiKey', 'secretRef', 'apikey'), createObject('name', 'PORT', 'value', format('{0}', variables('apiTargetPort'))), createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', reference(resourceId('Microsoft.Resources/deployments', format('law{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.appInsightsConnectionString.value), createObject('name', 'AZURE_CLIENT_ID', 'value', reference(resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.managedIdentityClientId.value), createObject('name', 'AzureDocumentIntelligenceEndpoint', 'value', reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.endpoint.value), createObject('name', 'AzureAISearchEndpoint', 'value', reference(resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.endpoint.value), createObject('name', 'ContentStorageContainer', 'value', reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.containerNames.value[0].name), createObject('name', 'CosmosDbEndpoint', 'value', reference(resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.endpoint.value), createObject('name', 'StorageAccountName', 'value', reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value)), createArray(createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', 'dotnet-isolated'), createObject('name', 'AzureWebJobsStorage__accountName', 'value', reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value), createObject('name', 'AzureWebJobsStorage__credential', 'value', 'managedidentity'), createObject('name', 'AzureWebJobsStorage__clientId', 'value', reference(resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.managedIdentityClientId.value), createObject('name', 'BatchAnalysisStorageAccountName', 'value', reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value), createObject('name', 'BatchAnalysisStorageInputContainerName', 'value', reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.containerNames.value[1].name), createObject('name', 'BatchAnalysisStorageOutputContainerName', 'value', reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.containerNames.value[2].name), createObject('name', 'CosmosDbDatabaseName', 'value', reference(resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.databaseName.value), createObject('name', 'CosmosDbContainerName', 'value', variables('uiChatContainerName')), createObject('name', 'MaxBatchSize', 'value', '10')))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "11727283342108817270"
            }
          },
          "parameters": {
            "appName": {
              "type": "string",
              "maxLength": 32
            },
            "managedEnvironmentName": {
              "type": "string"
            },
            "managedEnvironmentRg": {
              "type": "string"
            },
            "imageName": {
              "type": "string",
              "defaultValue": ""
            },
            "registryName": {
              "type": "string"
            },
            "userAssignedIdentityName": {
              "type": "string"
            },
            "workloadProfileName": {
              "type": "string"
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 80,
              "metadata": {
                "description": "The target port for the container"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "deploymentSuffix": {
              "type": "string",
              "defaultValue": ""
            },
            "secrets": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "The secrets required for the container, with the key being the secret name and the value being the key vault URL"
              }
            },
            "env": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The environment variables for the container"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2024-03-01",
              "name": "[parameters('appName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                }
              },
              "properties": {
                "managedEnvironmentId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('managedEnvironmentRg')), 'Microsoft.App/managedEnvironments', parameters('managedEnvironmentName'))]",
                "configuration": {
                  "copy": [
                    {
                      "name": "secrets",
                      "count": "[length(items(parameters('secrets')))]",
                      "input": {
                        "name": "[items(parameters('secrets'))[copyIndex('secrets')].key]",
                        "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]",
                        "keyVaultUrl": "[items(parameters('secrets'))[copyIndex('secrets')].value]"
                      }
                    }
                  ],
                  "ingress": {
                    "external": true,
                    "targetPort": "[parameters('targetPort')]",
                    "transport": "auto"
                  },
                  "registries": [
                    {
                      "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]",
                      "server": "[format('{0}.azurecr.io', parameters('registryName'))]"
                    }
                  ]
                },
                "template": {
                  "containers": [
                    {
                      "name": "[parameters('workloadProfileName')]",
                      "image": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference(resourceId('Microsoft.Resources/deployments', format('app-fetch-image-{0}{1}', parameters('appName'), parameters('deploymentSuffix'))), '2022-09-01').outputs, 'containers'), 'value'), 0), 'image'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                      "env": "[parameters('env')]",
                      "resources": {
                        "cpu": "[json('0.5')]",
                        "memory": "1.0Gi"
                      },
                      "probes": [
                        {
                          "type": "Liveness",
                          "httpGet": {
                            "path": "/healthz/live",
                            "port": "[parameters('targetPort')]"
                          }
                        },
                        {
                          "type": "Readiness",
                          "httpGet": {
                            "path": "/healthz/ready",
                            "port": "[parameters('targetPort')]"
                          }
                        },
                        {
                          "type": "Startup",
                          "httpGet": {
                            "path": "/healthz/startup",
                            "port": "[parameters('targetPort')]"
                          }
                        }
                      ]
                    }
                  ],
                  "scale": {
                    "minReplicas": 1,
                    "maxReplicas": 10
                  }
                },
                "workloadProfileName": "[parameters('workloadProfileName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('app-fetch-image-{0}{1}', parameters('appName'), parameters('deploymentSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('app-fetch-image-{0}{1}', parameters('appName'), parameters('deploymentSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "exists": {
                    "value": false
                  },
                  "name": {
                    "value": "[parameters('imageName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "3040635763803770475"
                    }
                  },
                  "parameters": {
                    "exists": {
                      "type": "bool"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "containers": {
                      "type": "array",
                      "value": "[if(parameters('exists'), reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-02-preview').template.containers, createArray())]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/containerApps', parameters('appName'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('appName')]"
            },
            "fqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('appName')), '2024-03-01').configuration.ingress.fqdn]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('secret-api-key{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('containerregistry{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('secret-cosmos{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('doc-intelligence{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('secret-doc-intelligence{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('app-identity{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('law{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('caenv{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('secret-openai{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('secret-search{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix')))]"
      ]
    }
  ],
  "outputs": {
    "SUBSCRIPTION_ID": {
      "type": "string",
      "value": "[subscription().subscriptionId]"
    },
    "ACR_NAME": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerregistry{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
    },
    "ACR_URL": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerregistry{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.loginServer.value]"
    },
    "AI_ENDPOINT": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('openai{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.endpoint.value]"
    },
    "AI_HUB_ID": {
      "type": "string",
      "value": "[if(parameters('deployAIHub'), reference(resourceId('Microsoft.Resources/deployments', format('aiHub{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.id.value, '')]"
    },
    "AI_HUB_NAME": {
      "type": "string",
      "value": "[if(parameters('deployAIHub'), reference(resourceId('Microsoft.Resources/deployments', format('aiHub{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value, '')]"
    },
    "AI_PROJECT_NAME": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('resource-names{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.aiHubProjectName.value]"
    },
    "AI_SEARCH_ENDPOINT": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('search{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.endpoint.value]"
    },
    "API_CONTAINER_APP_FQDN": {
      "type": "string",
      "value": "[if(parameters('deployAPIApp'), reference(resourceId('Microsoft.Resources/deployments', format('ca-api-stub{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.fqdn.value, '')]"
    },
    "API_CONTAINER_APP_NAME": {
      "type": "string",
      "value": "[if(parameters('deployAPIApp'), reference(resourceId('Microsoft.Resources/deployments', format('ca-api-stub{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value, '')]"
    },
    "API_KEY": {
      "type": "string",
      "value": "[variables('apiKeyValue')]"
    },
    "API_MANAGEMENT_ID": {
      "type": "string",
      "value": "[if(parameters('deployAPIM'), reference(resourceId('Microsoft.Resources/deployments', format('apim{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.id.value, '')]"
    },
    "API_MANAGEMENT_NAME": {
      "type": "string",
      "value": "[if(parameters('deployAPIM'), reference(resourceId('Microsoft.Resources/deployments', format('apim{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value, '')]"
    },
    "AZURE_CONTAINER_ENVIRONMENT_NAME": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('caenv{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
    },
    "AZURE_CONTAINER_REGISTRY_ENDPOINT": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerregistry{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.loginServer.value]"
    },
    "AZURE_CONTAINER_REGISTRY_NAME": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerregistry{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
    },
    "AZURE_RESOURCE_GROUP": {
      "type": "string",
      "value": "[variables('resourceGroupName')]"
    },
    "COSMOS_CONTAINER_NAME": {
      "type": "string",
      "value": "[variables('uiChatContainerName')]"
    },
    "COSMOS_DATABASE_NAME": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.databaseName.value]"
    },
    "COSMOS_ENDPOINT": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('cosmos{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.endpoint.value]"
    },
    "DOCUMENT_INTELLIGENCE_ENDPOINT": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('doc-intelligence{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.endpoint.value]"
    },
    "MANAGED_ENVIRONMENT_ID": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('caenv{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.id.value]"
    },
    "MANAGED_ENVIRONMENT_NAME": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('caenv{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
    },
    "RESOURCE_TOKEN": {
      "type": "string",
      "value": "[variables('resourceToken')]"
    },
    "STORAGE_ACCOUNT_BATCH_IN_CONTAINER": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.containerNames.value[1].name]"
    },
    "STORAGE_ACCOUNT_BATCH_OUT_CONTAINER": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.containerNames.value[2].name]"
    },
    "STORAGE_ACCOUNT_CONTAINER": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.containerNames.value[0].name]"
    },
    "STORAGE_ACCOUNT_NAME": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage{0}', variables('deploymentSuffix'))), '2022-09-01').outputs.name.value]"
    }
  }
}