# ------------------------------------------------------------------------------------------------------------------------
# Azure DevOps YAML Pipeline: Deploy-Only Stage Template with Rollback Support
# ------------------------------------------------------------------------------------------------------------------------
# This pipeline template handles deployment-only operations with proper rollback functionality.
# When rollback is enabled, it identifies the previous successful deployment and redeploys it.
# When rollback is disabled, it performs a standard deployment with the current configuration.
# ------------------------------------------------------------------------------------------------------------------------

parameters:
  - name: environments
    type: object
    default: ['DEV']
  - name: enableRollback
    displayName: 'Enable Rollback'
    type: boolean
    default: false
  - name: rollbackToDeployment
    displayName: 'Rollback to Deployment Name (optional)'
    type: string
    default: ''
  - name: templatePath
    type: string
    default: 'infra/bicep/'
  - name: templateFile
    type: string
    default: 'main-basic.bicep'
  - name: parameterFile
    type: string
    default: ''
  - name: deploymentMode
    type: string
    default: 'Incremental'
  - name: createResourceGroup
    type: boolean
    default: false
  - name: deployInResourceGroup
    type: boolean
    default: true
  - name: serviceConnectionPrefix
    type: string
    default: 'sc-'

stages:
  - ${{ each environment in parameters.environments }}:
    - stage: Deploy_${{ environment }}
      displayName: 'Deploy to ${{ environment }}'
      condition: succeeded()
      
      variables:
        - template: ../vars/var-common.yml
        - template: ../vars/var-${{ lower(environment) }}.yml
        - name: generatedResourceGroupName
          value: ${{ variables.resourceGroupPrefix }}-${{ environment }}-${{ variables.globalRegionCode }}-${{ variables.instanceNumber }}
        - name: serviceConnectionName
          value: ${{ parameters.serviceConnectionPrefix }}${{ environment }}
        - name: deploymentNamePrefix
          value: ${{ parameters.templateFile }}-rg-${{ variables.resourceGroupLocation }}

      jobs:
        - deployment: DeployResources
          displayName: 'Deploy Resources to ${{ environment }}'
          environment: ${{ environment }}
          strategy:
            runOnce:
              deploy:
                steps:
                  - checkout: self
                  
                  - task: PowerShell@2
                    displayName: 'Generate Deployment Name'
                    inputs:
                      targetType: 'inline'
                      script: |
                        $timestamp = Get-Date -Format "yyyyMMddHHmm"
                        $deploymentName = "$(deploymentNamePrefix)-$timestamp"
                        Write-Host "##vso[task.setvariable variable=currentDeploymentName]$deploymentName"
                        Write-Host "Generated deployment name: $deploymentName"

                  - ${{ if eq(parameters.enableRollback, true) }}:
                    - task: AzureCLI@2
                      displayName: 'Identify Rollback Target'
                      inputs:
                        azureSubscription: $(serviceConnectionName)
                        scriptType: 'bash'
                        scriptLocation: 'inlineScript'
                        inlineScript: |
                          echo "Rollback enabled - identifying target deployment..."
                          
                          # If specific deployment name is provided, use it
                          if [ -n "${{ parameters.rollbackToDeployment }}" ]; then
                            ROLLBACK_DEPLOYMENT="${{ parameters.rollbackToDeployment }}"
                            echo "Using specified rollback deployment: $ROLLBACK_DEPLOYMENT"
                          else
                            # Find the most recent successful deployment (excluding current one)
                            echo "Finding most recent successful deployment..."
                            ROLLBACK_DEPLOYMENT=$(az deployment group list \
                              --resource-group "$(generatedResourceGroupName)" \
                              --query "[?properties.provisioningState=='Succeeded'] | sort_by(@, &properties.timestamp) | [-2].name" \
                              --output tsv 2>/dev/null || echo "")
                          fi
                          
                          if [ -z "$ROLLBACK_DEPLOYMENT" ] || [ "$ROLLBACK_DEPLOYMENT" = "null" ]; then
                            echo "##vso[task.logissue type=error]No previous successful deployment found for rollback"
                            echo "Available deployments:"
                            az deployment group list --resource-group "$(generatedResourceGroupName)" --query "[].{Name:name, Status:properties.provisioningState, Timestamp:properties.timestamp}" --output table || echo "No deployments found"
                            exit 1
                          fi
                          
                          echo "##vso[task.setvariable variable=rollbackDeploymentName]$ROLLBACK_DEPLOYMENT"
                          echo "Rollback target identified: $ROLLBACK_DEPLOYMENT"
                          
                          # Get the template and parameters from the rollback deployment
                          echo "Retrieving rollback deployment details..."
                          az deployment group show \
                            --resource-group "$(generatedResourceGroupName)" \
                            --name "$ROLLBACK_DEPLOYMENT" \
                            --query "properties.template" > rollback-template.json
                          
                          az deployment group show \
                            --resource-group "$(generatedResourceGroupName)" \
                            --name "$ROLLBACK_DEPLOYMENT" \
                            --query "properties.parameters" > rollback-parameters.json
                          
                          echo "Rollback deployment details retrieved successfully"
                          
                    - task: AzureResourceManagerTemplateDeployment@3
                      displayName: 'Execute Rollback Deployment'
                      inputs:
                        deploymentScope: 'Resource Group'
                        azureResourceManagerConnection: $(serviceConnectionName)
                        action: 'Create Or Update Resource Group'
                        resourceGroupName: $(generatedResourceGroupName)
                        location: $(resourceGroupLocation)
                        templateLocation: 'Linked artifact'
                        csmFile: 'rollback-template.json'
                        csmParametersFile: 'rollback-parameters.json'
                        deploymentMode: '${{ parameters.deploymentMode }}'
                        deploymentName: '$(currentDeploymentName)-rollback'
                        
                    - task: PowerShell@2
                      displayName: 'Verify Rollback Success'
                      inputs:
                        targetType: 'inline'
                        script: |
                          Write-Host "Rollback deployment completed."
                          Write-Host "Rolled back to deployment: $(rollbackDeploymentName)"
                          Write-Host "New deployment name: $(currentDeploymentName)-rollback"
                          Write-Host "##vso[task.setvariable variable=deploymentCompleted]true"

                  - ${{ if eq(parameters.enableRollback, false) }}:
                    - task: PowerShell@2
                      displayName: 'Validate Template Parameters'
                      inputs:
                        targetType: 'inline'  
                        script: |
                          $templatePath = "${{ parameters.templatePath }}${{ parameters.templateFile }}"
                          if (-not (Test-Path $templatePath)) {
                            Write-Host "##vso[task.logissue type=error]Template file not found: $templatePath"
                            exit 1
                          }
                          
                          $paramPath = "${{ parameters.templatePath }}${{ parameters.parameterFile }}"
                          if ("${{ parameters.parameterFile }}" -ne "" -and -not (Test-Path $paramPath)) {
                            Write-Host "##vso[task.logissue type=error]Parameter file not found: $paramPath"
                            exit 1
                          }
                          
                          Write-Host "Template validation passed"
                          Write-Host "Template: $templatePath"
                          if ("${{ parameters.parameterFile }}" -ne "") {
                            Write-Host "Parameters: $paramPath"
                          }

                    - ${{ if eq(parameters.createResourceGroup, true) }}:
                      - task: AzureCLI@2
                        displayName: 'Create Resource Group'
                        inputs:
                          azureSubscription: $(serviceConnectionName)
                          scriptType: 'bash'
                          scriptLocation: 'inlineScript'
                          inlineScript: |
                            az group create \
                              --name "$(generatedResourceGroupName)" \
                              --location "$(resourceGroupLocation)" \
                              --tags Environment=${{ environment }}

                    - task: AzureResourceManagerTemplateDeployment@3
                      displayName: 'Deploy Azure Resources'
                      inputs:
                        deploymentScope: ${{ if eq(parameters.deployInResourceGroup, true) }}Resource Group${{ else }}Subscription${{ endif }}
                        azureResourceManagerConnection: $(serviceConnectionName)
                        ${{ if eq(parameters.deployInResourceGroup, true) }}:
                          action: 'Create Or Update Resource Group'
                          resourceGroupName: $(generatedResourceGroupName)
                          location: $(resourceGroupLocation)
                        ${{ else }}:
                          location: $(resourceGroupLocation)
                        templateLocation: 'Linked artifact'
                        csmFile: '${{ parameters.templatePath }}${{ parameters.templateFile }}'
                        ${{ if ne(parameters.parameterFile, '') }}:
                          csmParametersFile: '${{ parameters.templatePath }}${{ parameters.parameterFile }}'
                        deploymentMode: '${{ parameters.deploymentMode }}'
                        deploymentName: '$(currentDeploymentName)'

                    - task: PowerShell@2
                      displayName: 'Verify Deployment Success'
                      inputs:
                        targetType: 'inline'
                        script: |
                          Write-Host "Standard deployment completed successfully."
                          Write-Host "Deployment name: $(currentDeploymentName)"
                          Write-Host "##vso[task.setvariable variable=deploymentCompleted]true"

                  - task: AzureCLI@2
                    displayName: 'Validate Deployment Status'
                    inputs:
                      azureSubscription: $(serviceConnectionName)
                      scriptType: 'bash'
                      scriptLocation: 'inlineScript'
                      inlineScript: |
                        echo "Validating deployment status..."
                        
                        # Determine the deployment name to check
                        if [ "${{ parameters.enableRollback }}" = "True" ]; then
                          DEPLOYMENT_TO_CHECK="$(currentDeploymentName)-rollback"
                          echo "Checking rollback deployment: $DEPLOYMENT_TO_CHECK"
                        else
                          DEPLOYMENT_TO_CHECK="$(currentDeploymentName)"
                          echo "Checking standard deployment: $DEPLOYMENT_TO_CHECK"
                        fi
                        
                        # Get deployment status
                        DEPLOYMENT_STATUS=$(az deployment group show \
                          --resource-group "$(generatedResourceGroupName)" \
                          --name "$DEPLOYMENT_TO_CHECK" \
                          --query "properties.provisioningState" \
                          --output tsv 2>/dev/null || echo "NotFound")
                        
                        echo "Deployment Status: $DEPLOYMENT_STATUS"
                        
                        if [ "$DEPLOYMENT_STATUS" = "Succeeded" ]; then
                          echo "✅ Deployment validation passed"
                          
                          # Display deployment outputs if available
                          echo "Deployment outputs:"
                          az deployment group show \
                            --resource-group "$(generatedResourceGroupName)" \
                            --name "$DEPLOYMENT_TO_CHECK" \
                            --query "properties.outputs" \
                            --output table 2>/dev/null || echo "No outputs available"
                            
                        elif [ "$DEPLOYMENT_STATUS" = "Failed" ]; then
                          echo "❌ Deployment failed"
                          
                          # Get error details
                          echo "Error details:"
                          az deployment group show \
                            --resource-group "$(generatedResourceGroupName)" \
                            --name "$DEPLOYMENT_TO_CHECK" \
                            --query "properties.error" \
                            --output json 2>/dev/null || echo "Error details not available"
                          
                          exit 1
                        elif [ "$DEPLOYMENT_STATUS" = "NotFound" ]; then
                          echo "❌ Deployment not found: $DEPLOYMENT_TO_CHECK"
                          
                          echo "Available deployments:"
                          az deployment group list \
                            --resource-group "$(generatedResourceGroupName)" \
                            --query "[].{Name:name, Status:properties.provisioningState, Timestamp:properties.timestamp}" \
                            --output table 2>/dev/null || echo "No deployments found"
                          
                          exit 1
                        else
                          echo "⚠️  Deployment in unexpected state: $DEPLOYMENT_STATUS"
                          exit 1
                        fi

                  - task: PowerShell@2
                    displayName: 'Generate Deployment Summary'
                    condition: succeeded()
                    inputs:
                      targetType: 'inline'
                      script: |
                        $summary = @"
                        # Deployment Summary - ${{ environment }}
                        
                        **Deployment Type:** ${{ if eq(parameters.enableRollback, true) }}Rollback${{ else }}Standard${{ endif }}
                        **Resource Group:** $(generatedResourceGroupName)
                        **Deployment Name:** ${{ if eq(parameters.enableRollback, true) }}$(currentDeploymentName)-rollback${{ else }}$(currentDeploymentName)${{ endif }}
                        **Status:** ✅ Completed Successfully
                        
                        ${{ if eq(parameters.enableRollback, true) }}
                        **Rollback Details:**
                        - Target Deployment: $(rollbackDeploymentName)
                        - Rollback initiated successfully
                        ${{ else }}
                        **Deployment Details:**
                        - Template: ${{ parameters.templatePath }}${{ parameters.templateFile }}
                        - Mode: ${{ parameters.deploymentMode }}
                        ${{ endif }}
                        "@
                        
                        Write-Host $summary
                        Write-Host "##vso[task.uploadsummary]$summary"